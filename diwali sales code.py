# -*- coding: utf-8 -*-
"""Untitled63.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I-306a9M8gwibxy8TgvHg_9_wro7dygv
"""

import pandas as pd
import numpy as np
import seaborn as sns

d1=pd.read_csv("/content/Diwali Sales Data.csv",encoding='unicode_escape')
d1

d1.tail()

d1.isnull().sum()

d1.drop(['Status','unnamed1'],inplace=True,axis=1)

d1.info()

d1.isnull().sum()

#drop nan values
d1.dropna(inplace=True)

d1.info()

d1.isnull().sum()

d1.shape

d1.describe()

#numbers
d1.select_dtypes(include='number')

#categorcial col
d1.select_dtypes(exclude='number')



"""Exploratory Data analaysis"""

ax=sns.countplot(data=d1,x='Age Group')
for bars in ax.containers:
    ax.bar_label(bars)

#bar plot using two  variable one is cat another is numerical
import matplotlib.pyplot as plt  # Import the pyplot submodule with an alias "plt"

# You can use "plt" to create plots and visualizations.

ax=sns.barplot(data=d1,x='Age Group',y='Amount')
plt.title("realation between the Age GROUP Vs AMOUNT")
plt.xticks(rotation=90)
for bars in ax.containers:
  ax.bar_label(bars)

#age
ax=sns.countplot(data=d1,x='Gender')
plt.xticks(rotation=90)
for bars in ax.containers:
  ax.bar_label(bars)

d1.head()

d1['State'].value_counts()

d2=d1.groupby('State',as_index=False)['Amount'].mean().sort_values(by='Amount',ascending=False)
d2

#   average in first and seconddelhi and karnataka most of the cracker used that day is diwali
# average in last mahadya pradesh least
plt.figure(figsize=(14,6))
plt.xticks(rotation=90)
bx=sns.barplot(data=d2[:10],x='State',y='Amount',orient='v')
for bars in bx.containers:
  bx.bar_label(bars)
plt.show()

#age vs amount total sum
d3=d1.groupby('Age Group',as_index=False)['Amount'].sum().sort_values(by='Amount',ascending=False)
d3

plt.figure(figsize=(14,6))
plt.xticks(rotation=90)
bx=sns.barplot(data=d3,x='Age Group',y='Amount',orient='v')
for bars in bx.containers:
  bx.bar_label(bars)
plt.show()

d3 = d1.groupby(['Age Group'], as_index=False)['Amount'].sum().sort_values(by='Amount', ascending=False)
sns.set(rc={'figure.figsize':(10,4)})
sns.barplot(x = 'Age Group',y= 'Amount' ,data = d3)

#total number of orders top 10 of states

d4 = d1.groupby(['State'], as_index=False)['Amount'].sum().sort_values(by='Amount', ascending=False)
sns.set(rc={'figure.figsize':(20,4)})
sns.barplot(x = 'State',y= 'Amount' ,data = d4)

"""Marital status"""

ax = sns.countplot(data = d1, x = 'Marital_Status')
sns.set(rc={'figure.figsize':(3,3)})
for bars in ax.containers:
  ax.bar_label(bars)

sns.set(rc={'figure.figsize':(20,5)})
ax = sns.countplot(data = d1, x = 'Occupation')
for bars in ax.containers:
  ax.bar_label(bars)

d1.head()

"""total amount  of Occupation"""

d1.groupby('Occupation',as_index=False)['Amount'].sum().sort_values(by= 'Amount',ascending =False)

d5=d1.groupby('Occupation',as_index=False)['Amount'].sum().sort_values(by='Amount',ascending=False)
d5

sns.barplot(data=d5,x='Occupation',y='Amount')

plt.figure(figsize=(25,8))
plt.xticks(rotation=90)
sns.countplot(data=d1,x='Product_Category')

d1.head()

d6=d1.groupby('Product_Category',as_index=False)['Amount'].sum().sort_values(by='Amount',ascending=False)
d6

plt.figure(figsize=(25,8))
plt.xticks(rotation=90)
plt.title('total nuber of prodcuts vs amount ')
sns.barplot(data=d6,x='Product_Category',y='Amount')

#top prodcuts
d7=d1.groupby('Product_ID',as_index=False)['Orders'].sum().sort_values(by='Orders',ascending=False)
d7

plt.figure(figsize=(25,8))
plt.xticks(rotation=90)
plt.title('total nuber of prodcuts vs amount ')
sns.barplot(data=d7[:10],x='Product_ID',y='Orders')
plt.show()

fig1, ax1 = plt.subplots(figsize=(12,4))
ax = d1.groupby('Product_ID')['Orders'].sum().nlargest(10).sort_values(ascending=False).plot(kind='bar')
for bars in ax.containers:
  ax.bar_label(bars)

d1.head(10)

d1.pivot_table(index='State',columns='Product_Category',values='Amount',aggfunc=['max','min'])

d1.head(10)

sns.countplot(x='Cust_name',data=d1)

d1['Zone'].value_counts()

sns.countplot(x='Zone',data=d1)

"""total number of zones of **amounts**

> Indented block


"""

d7=d1.groupby('Zone',as_index=False)['Amount'].sum().sort_values(by='Amount',ascending=False)
d7

sns.barplot(data=d7,x='Zone',y='Amount')