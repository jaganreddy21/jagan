# -*- coding: utf-8 -*-
"""Untitled84.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z3kGnunmw67B4ZMg9ge6NJfq_mEKpLv4

Click me to see the sample solution

179. Write a Python program to create the largest possible number using the elements of a given list of positive integers.

Original list:

[3, 40, 41, 43, 74, 9]

Largest possible number using the elements of the said list of positive
integers:

9744341403


Original list:

[10, 40, 20, 30, 50, 60]

Largest possible number using the elements of the said list of positive integers:
605040302010
Original list:
[8, 4, 2, 9, 5, 6, 1, 0]

Largest possible number using the elements of the said list of positive integers:
98654210
"""

def largest_values(inputList):

  inputList.sort(reverse=True,key=str)
  print(inputList)
  print(type(inputList))
  new_one=''
  for x in inputList:
    new_one+=str(x)
  return new_one


inputList = [3, 40, 41, 43, 74, 9]
print("Largest possible number using the elements of the said list of positive integers:")
print(largest_values(inputList))
list2=[10, 40, 20, 30, 50, 60]

print("Largest possible number using the elements of the said list of positive integers:")

print(largest_values(list2))
list3=[8, 4, 2, 9, 5, 6, 1, 0]

print("Largest possible number using the elements of the said list of positive integers:")
print(largest_values(list3))

"""above code  apporaching comaprsion like below output like this"""

# Given list of numbers
inputList = [3, 40, 41, 43, 74, 9]

# Sort the list in reverse order using the string representation of each element
inputList.sort(reverse=True, key=str)

# Print the sorted list
print("Sorted List:", inputList)

# Comparison Steps
print("\nComparison Steps:")
for i in range(len(inputList) - 1):
    x = inputList[i]
    y = inputList[i + 1]

    # Compare x and y by concatenating in different orders
    order1 = int(str(x) + str(y))
    order2 = int(str(y) + str(x))

    # Print the comparison result
    print(f"Comparing {x} and {y}: {order1} vs {order2} => {order1 > order2}")

def largest_values(inputList):

  inputList.sort(reverse=False,key=str)
  print(inputList)
  print(type(inputList))
  new_one=''
  for x in inputList:
    new_one+=str(x)
  return new_one
list2=[10, 40, 20, 30, 50, 60]

print("Largest possible number using the elements of the said list of positive integers:")

print(largest_values(list2))

"""180. Write a Python program to create the smallest possible number using the elements of a given list of positive integers.
Original list:
[3, 40, 41, 43, 74, 9]

Smallest possible number using the elements of the said list of positive
integers:

3404143749

Original list:

[10, 40, 20, 30, 50, 60]

Smallest possible number using the elements of the said list of positive
integers:

102030405060

Original list:

[8, 4, 2, 9, 5, 6, 1, 0]

Smallest possible number using the elements of the said list of positive
integers:

01245689
"""

def smallest_element(numbers):
  numbers.sort(reverse=False,key=str)
  print(numbers)
  output=''
  for x in numbers:
    output+=str(x)
  return output

numbers=[3, 40, 41, 43, 74, 9]
print("Smallest possible number using the elements of the said list of positive integers:")
print(smallest_element(numbers))

numbers=[10, 40, 20, 30, 50, 60]
print("Smallest possible number using the elements of the said list of positive integers:")
print(smallest_element(numbers))
numbers=[8, 4, 2, 9, 5, 6, 1, 0]
print("Smallest possible number using the elements of the said list of positive integers:")
print(smallest_element(numbers))

"""v181. Write a Python program to iterate a given list cyclically at a specific index position.
Original list:
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']

Iterate the said list cyclically on specific index position 3 :
['d', 'e', 'f', 'g', 'h', 'a', 'b', 'c']

Iterate the said list cyclically on specific index position 5 :
['f', 'g', 'h', 'a', 'b', 'c', 'd', 'e']

"""

def new_list(Original_list,n):

  ALL=Original_list[n:]+Original_list[:n]
  return ALL

Original_list= ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
n=3
new_line=new_list(Original_list,n)
print(f"Iterate the said list cyclically on specific index position {n}: {new_line}")

def new_list(Original_list,n):

  ALL=Original_list[n:]+Original_list[:n]
  return ALL

Original_list= ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
n=5
new_line=new_list(Original_list,n)
print(f"Iterate the said list cyclically on specific index position {n}: {new_line}")

"""182. Write a Python program to calculate the maximum and minimum sum of a sublist in a given list of lists.
Original list:

[[1, 2, 3, 5], [2, 3, 5, 4], [0, 5, 4, 1], [3, 7, 2, 1], [1, 2, 1, 2]]

Maximum sum of sub list of the said list of lists:
[2, 3, 5, 4]

Minimum sum of sub list of the said list of lists:
[1, 2, 1, 2]

"""

def new_list(new_return):
  max_sum=max(new_return,key=sum)
  min_sum=min(new_return,key=sum)
  print(new_return)
  print("Maximum sum of sub list of the said list of lists:",max_sum)
  print("Minimum sum of sub list of the said list of lists:",min_sum)

new_return=[[1, 2, 3, 5], [2, 3, 5, 4], [0, 5, 4, 1], [3, 7, 2, 1], [1, 2, 1, 2]]
new_list(new_return)

# Define a function called 'max_min_sublist' that finds the sublist with the maximum and minimum sums in a list of lists.
def max_min_sublist(lst):
    max_result = (max(lst, key=sum))  # Find the sublist with the maximum sum using the 'max' function and the 'sum' key.
    min_result = (min(lst, key=sum))  # Find the sublist with the minimum sum using the 'min' function and the 'sum' key.
    return max_result, min_result  # Return both the sublist with the maximum and minimum sums.

# Create a list of lists 'nums', where each sublist contains integers.
nums = [[1, 2, 3, 5], [2, 3, 5, 4], [0, 5, 4, 1], [3, 7, 2, 1], [1, 2, 1, 2]]

# Print a message indicating the original list of lists.
print("Original list:")
print(nums)

# Call the 'max_min_sublist' function with 'nums' and store the results for maximum and minimum sum sublists.
result = max_min_sublist(nums)

# Print a message indicating the maximum sum of a sublist in the list of lists.
print("\nMaximum sum of sub list of the said list of lists:")
# Print the sublist with the maximum sum.
print(result[0])

# Print a message indicating the minimum sum of a sublist in the list of lists.
print("\nMinimum sum of sub list of the said list of lists:")
# Print the sublist with the minimum sum.
print(result[1])

"""[[1, 2, 3, 5], [2, 3, 5, 4], [0, 5, 4, 1], [3, 7, 2, 1], [1, 2, 1, 2]]

Unique values of the said list of lists:

[0, 1, 2, 3, 4, 5, 7]

Original list:

[['h', 'g', 'l', 'k'], ['a', 'b', 'd', 'e', 'c'], ['j', 'i', 'y'], ['n', 'b',
'v', 'c'], ['x', 'z']]

Unique values of the said list of lists:

['e', 'd', 'c', 'b', 'x', 'k', 'n', 'h', 'g', 'j', 'i', 'a', 'l', 'y', 'v', 'z']
"""

def unique_value(numbers):
  new_list=[]

  for  x in numbers:
    for y in x:
      if y in new_list:
        new_list.append(y)
    return new_list
print(unique_value([[1, 2, 3, 5], [2, 3, 5, 4], [0, 5, 4, 1], [3, 7, 2, 1], [1, 2, 1, 2]]))

"""these will work fine on the onlien comphiler python"""

n=[[1, 2, 3, 5], [2, 3, 5, 4], [0, 5, 4, 1], [3, 7, 2, 1], [1, 2, 1, 2]]
number=list(set(y for x in n for y in x))
print(number)

name=['My','Friend']
result=0
for x in name:
  length=len(x)
  if length>result:
    result=length
print(result)

"""184. Write a Python program to generate Bigrams of words from a given list of strings.
From Wikipedia:

A bigram or digram is a sequence of two adjacent elements from a string of

tokens, which are typically letters, syllables, or words. A bigram is an n-gram

 for n=2. The frequency distribution of every bigram in a string is commonly

 used for simple statistical analysis of text in many applications, including

 in computational linguistics, cryptography, speech recognition, and so on.

Original list:
"""

def bigrams(numbers):
  new_step=[]
  for x in numbers:
    new=x.split()
    print(new)
    for new_line in range(0,len(new)-1):
      sum=(new[new_line],new[new_line+1])
      new_step.append(sum)
  return new_step






numbers=['Sum all the items in a list', 'Find the second smallest number in a list']
print(bigrams(numbers))

def generate_bigrams(strings):
    bigrams = []

    for string in strings:
        words = string.split()
        # Iterate through each word in the list and form bigrams
        for i in range(len(words) - 1):
            bigram = (words[i], words[i + 1])
            bigrams.append(bigram)

    return bigrams

# Original list of strings
original_list = ['Sum all the items in a list', 'Find the second smallest number in a list']

# Generate bigrams
result_bigrams = generate_bigrams(original_list)

# Print the original list
print("Original list:")
for string in original_list:
    print(f'"{string}"')

# Print the bigram sequence
print("\nBigram sequence of the said list:")
print(result_bigrams)

"""186. Write a Python program to swap two sublists in a given list.
Original list:

[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

Swap two sublists of the said list:

[0, 6, 7, 8, 9, 3, 4, 5, 1, 2, 10, 11, 12, 13, 14, 15]

Swap two sublists of the said list:

[0, 9, 3, 8, 6, 7, 4, 5, 1, 2, 10, 11, 12, 13, 14, 15]
"""

numbers=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
numbers[6:10],numbers[1:3]=numbers[1:3],numbers[6:10]
print(numbers)

new_ones=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
new_ones[4:6]

# Create a list 'nums' containing integer values from 0 to 15.
nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

# Print a message indicating the original list.
print("Original list:")
# Print the original list 'nums'.
print(nums)

# Swap two sublists in 'nums'. The sublist from index 6 to 10 is swapped with the sublist from index 1 to 3.
nums[6:10], nums[1:3] = nums[1:3], nums[6:10]

# Print a message indicating that two sublists have been swapped.
print("\nSwap two sublists of the said list:")
# Print the modified 'nums' list with the swapped sublists.
print(nums)

# Swap two sublists in 'nums'. The sublist from index 1 to 3 is swapped with the sublist from index 4 to 6.
nums[1:3], nums[4:6] = nums[4:6], nums[1:3]

# Print a message indicating that two sublists have been swapped again.
print("\nSwap two sublists of the said list:")
# Print the modified 'nums' list with the sublists swapped back to their original positions.

print(nums)

def swap_sublists(lst, start1, end1, start2, end2):
    # Extract sublists
    sublist1 = lst[start1:end1 + 1]
    sublist2 = lst[start2:end2 + 1]

    # Swap the sublists in the original list
    lst[start1:end1 + 1] = sublist2
    lst[start2:end2 + 1] = sublist1

# Original list
nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

# Print the original list
print("Original list:")
print(nums)

# Swap two sublists
swap_sublists(nums, 1, 5, 8, 10)
print("\nSwap two sublists of the said list:")
print(nums)

# Swap two different sublists
swap_sublists(nums, 1, 3, 5, 7)
print("\nSwap two sublists of the said list:")
print(nums)

def swap_list(lst,start1,end1,start2,end2):
  lst[start1:end1],lst[start2:end2]=lst[start2:end2],lst[start1:end2]





nums=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
swap_list(nums,1,5,8,10)
print("Swap two sublists of the said list")
print(nums)

def swap_sublists(lst, start1, end1, start2, end2):
    lst[start1:end1 + 1], lst[start2:end2 + 1] = lst[start2:end2 + 1], lst[start1:end1 + 1]

# Original list
nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

# Print the original list
print("Original list:")
print(nums)

# Swap two sublists
swap_sublists(nums, 1, 5, 8, 10)
print("\nSwap two sublists of the said list:")
print(nums)

# Swap two different sublists
swap_sublists(nums, 1, 3, 5, 7)
print("\nSwap two sublists of the said list:")
print(nums)

def remove_tuple(list1):
  new_ones=[' '.join(t) for t in list1]
  return new_ones





a = [('Laiba', 'Delacruz'), ('Mali', 'Stacey', 'Drummond'), ('Raja', 'Welch'), ('Saarah', 'Stone')]
print(remove_tuple(a))


print("Original list of tuples:")
a=[('red', 'green'), ('black', 'white'), ('orange', 'pink')]

print("Convert the said list of tuples to a list of strings:")
print(remove_tuple(a))

print("Original list of tuples:")

print("\n")

a=[('Laiba', 'Delacruz'), ('Mali', 'Stacey', 'Drummond'), ('Raja', 'Welch'), ('Saarah', 'Stone')]
print("Convert the said list of tuples to a list of strings:")
print(remove_tuple(a))

"""188. Write a Python program to sort a given list of tuples by a specified element.
Original list of tuples:

[('item2', 10, 10.12), ('item3', 15, 25.1), ('item1', 11, 24.5), ('item4', 12,
22.5)]

Sort on 1st element of the tuple of the said list:

[('item1', 11, 24.5), ('item2', 10, 10.12), ('item3', 15, 25.1), ('item4', 12, 22.5)]

Sort on 2nd element of the tuple of the said list:

[('item2', 10, 10.12), ('item1', 11, 24.5), ('item4', 12, 22.5), ('item3', 15, 25.1)]

Sort on 3rd element of the tuple of the said list:
[('item2', 10, 10.12), ('item4', 12, 22.5), ('item1', 11, 24.5), ('item3', 15, 25.1)]
"""

def get_data(list1,n):
  list2=sorted(list1,key=lambda x:x[n])
  return list2
number=[('item2', 10, 10.12), ('item3', 15, 25.1), ('item1', 11, 24.5), ('item4', 12, 22.5)]
n=0
print(get_data(number,n))
n=1
print(get_data(number,n))
n=2
print(get_data(number,n))

"""189. Write a Python program to shift last element to first position and first element to last position in a given list.
Original list:

[1, 2, 3, 4, 5, 6, 7]

Shift last element to first position and first element to last position of the said list:
[7, 2, 3, 4, 5, 6, 1]

Original list:
['s', 'd', 'f', 'd', 's', 's', 'd', 'f']

Shift last element to first position and first element to last position of the said list:

['f', 'd', 'f', 'd', 's', 's', 'd', 's']
"""

number=[1, 2, 3, 4, 5, 6, 7]
number[0],number[-1]=number[-1],number[0]
print(number)

number1=['s', 'd', 'f', 'd', 's', 's', 'd', 'f']
number1[0],number1[-1]=number1[-1],number1[0]
print(number1)

def swap_elements(element):
  x=element.pop(0)
  y=element.pop()
  element.insert(0,y)
  element.insert(len(element),x)
  return element
element=[1, 2, 3, 4, 5, 6, 7]

print(swap_elements(element))
new_list= ['s', 'd', 'f', 'd', 's', 's', 'd', 'f']
print(swap_elements(new_list))

# Define a function called 'shift_first_last' that shifts the first element to the last position and the last element to the first position of a list.
def shift_first_last(lst):
    # Remove the first element and store it in 'x'.
    x = lst.pop(0)
    print(x)
    # Remove the last element and store it in 'y'.
    y = lst.pop()
    print(y)
    # Insert 'y' at the first position.
    lst.insert(0, y)
    # Insert 'x' at the last position.
    lst.insert(len(lst), x)
    return lst

# Create a list 'nums' containing integers.
nums = [1, 2, 3, 4, 5, 6, 7]

# Print a message indicating the original list.
print("Original list:")
# Print the original list 'nums'.
print(nums)

# Print a message indicating shifting the last element to the first position and the first element to the last position of the list.
print("Shift last element to first position and first element to last position of the said list:")
# Call the 'shift_first_last' function with 'nums' and print the result.
print(shift_first_last(nums))

# Create a list 'chars' containing characters.
chars = ['s', 'd', 'f', 'd', 's', 's', 'd', 'f']

# Print a message indicating the original list.
print("\nOriginal list:")
# Print the original list 'chars'.
print(chars)

# Print a message indicating shifting the last element to the first position and the first element to the last position of the list.
print("Shift last element to first position and first element to last position of the said list:")
# Call the 'shift_first_last' function with 'chars' and print the result.
print(shift_first_last(chars))

"""Original lists:
[1, 2, 3, 4, 5, 6]
[3, 6, 8, 9, 10, 6]

3 Number of largest products from the said two lists:

[60, 54, 50]
4 Number of largest products from the said two lists:

[60, 54, 50, 48]
"""

def largest_products(number1,number2,n):
  products=[x*y for x in number1 for y in number2]

  new_products=sorted(products,reverse=True)[:n]

  return new_products

n=3
element1=[1, 2, 3, 4, 5, 6]
element2=[3, 6, 8, 9, 10, 6]
print("Number of largest products from the said two lists:",largest_products(element1,element2,n))
n=4
element1=[1, 2, 3, 4, 5, 6]
element2=[3, 6, 8, 9, 10, 6]
print("Number of largest products from the said two lists:",largest_products(element1,element2,n))

def find_largest_products(list1, list2, num):
    # Initialize an empty list to store products
    products = []

    # Iterate through all possible pairs of elements from the two lists
    for elem1 in list1:
        for elem2 in list2:
            products.append(elem1 * elem2)

    # Sort the list of products in descending order
    products.sort(reverse=True)

    # Slice the list to get the specified number of largest products
    result = products[:num]

    return result

# Original lists
list1 = [1, 2, 3, 4, 5, 6]
list2 = [3, 6, 8, 9, 10, 6]

# Number of largest products to find
num1 = 3
num2 = 4

# Find and print the specified number of largest products for each case
result1 = find_largest_products(list1, list2, num1)
result2 = find_largest_products(list1, list2, num2)

print(f"Original lists:\n{list1}\n{list2}")
print(f"{num1} Number of largest products from the said two lists:\n{result1}")
print(f"{num2} Number of largest products from the said two lists:\n{result2}")

"""191. Write a Python program to find the maximum and minimum values of the three given lists.
Original lists:

[2, 3, 5, 8, 7, 2, 3]

[4, 3, 9, 0, 4, 3, 9]

[2, 1, 5, 6, 5, 5, 4]
Maximum value of the said three lists:

9
Minimum value of the said three lists:

0
"""

def max_min(element1,element2,element3):
   max_value=max(element1+element2+element3)
   print(max_value)

   min_value=min(element1+element2+element3)
   print(min_value)


element1=[2, 3, 5, 8, 7, 2, 3]
element2=[4, 3, 9, 0, 4, 3, 9]
element3=[2, 1, 5, 6, 5, 5, 4]
max_min(element1,element2,element3)

def max_min(element1,element2,element):
  new_one=max([x for x in zip(element1,element2,element3)],key=lambda x:max(x))
  print(new_one)
  new_two=min([x for x in zip(element1,element2,element3)],key=lambda x:max(x))
  print(new_two)







element=[2, 3, 5, 8, 7, 2, 3]
element2=[4, 3, 9, 0, 4, 3, 9]
element3=[2, 1, 5, 6, 5, 5, 4]
print(max_min(element1,element2,element3))

"""192. Write a Python program to remove all strings from a given list of tuples.
Original list:

[(100, 'Math'), (80, 'Math'), (90, 'Math'), (88, 'Science', 89), (90,
'Science', 92)]

Remove all strings from the said list of tuples:
[(100,), (80,), (90,), (88, 89), (90, 92)]

Click me to see the sample solution

"""

def list_of_elements(element):
  new_one=[tuple(v for v in x if not isinstance(v,str)) for x in element]
  return new_one
element=[(100, 'Math'), (80, 'Math'), (90, 'Math'), (88, 'Science', 89), (90, 'Science', 92)]
print(list_of_elements(element))

def new_word(word,n):
  new_line=[i for i,value in enumerate(word) if n in value]
  return new_line
word=['leet','code']
n='e'
print(new_word(word,n))
word1=['abc','bcd','aaa','cbc']
n='a'
print(new_word(word1,n))

print("Dimension of the said matrix:")

"""193. Write a Python program to find the dimension of a given matrix.
Original list:
[[1, 2], [2, 4]]

Dimension of the said matrix:

(2, 2)
Original list:

[[0, 1, 2], [2, 4, 5]]

Dimension of the said matrix:

(2, 3)
Original list:

[[0, 1, 2], [2, 4, 5], [2, 3, 4]]

Dimension of the said matrix:
(3, 3)
"""

def demision_list(number):
  new_number=len(number)

  old_number=len(number[0])
  return new_number,old_number
list2=[[1, 2], [2, 4]]
print("Original list:",list2)
print("Dimension of the said matrix:")
print(demision_list(list2))

print("Original list:")
list3=[[0, 1, 2], [2, 4, 5]]
print("Original list",list3)
print("Dimension of the said matrix:")
print(demision_list(list3))

print("Original list",list4)
list4=[[0, 1, 2], [2, 4, 5], [2, 3, 4]]
print("Dimension of the said matrix:")
print(demision_list(list4))

from itertools import zip_longest

def sum_lists(lists):
    # Use zip_longest to combine lists with padding for different lengths
    padded_lists = zip_longest(*lists, fillvalue=0)


    #
    result = [sum(x) for x in padded_lists]
    print(result)

    return result

# Example usage:
original_list1 = [[1, 2, 4], [2, 4, 4], [1, 2]]
result1 = sum_lists(original_list1)
print("Original list:")
print(original_list1)
print("Sum said lists with different lengths:")
print(result1)

original_list2 = [[1], [2, 4, 4], [1, 2], [4]]
result2 = sum_lists(original_list2)
print("\nOriginal list:")
print(original_list2)
print("Sum said lists with different lengths:")
print(result2)

"""195. Write a Python program to traverse a given list in reverse order, and print the elements with the original index.
Original list:
['red', 'green', 'white', 'black']

Traverse the said list in reverse order:

black
white
green
red
Traverse the said list in reverse order with original index:

3 black
2 white
1 green
0 red
"""

def new_number(number):
  for x in number:
    print(x)
number=['red', 'green', 'white', 'black']
new_number(number)

def new_number(number):
  for x ,el in reversed(list(enumerate(number))):
    print(x,el)


number=['red', 'green', 'white', 'black']
new_number(number)

def new_number(number):
    reversed_list = list(reversed(number))
    for x, (original, reversed_value) in enumerate(zip(number, reversed_list)):
        print(f"Index: {x}, Original: {original}, Reversed: {reversed_value}")

number = ['red', 'green', 'white', 'black']
new_number(number)

"""196. Write a Python program to move a specified element in a given list.
Original list:
['red', 'green', 'white', 'black', 'orange']

Move white at the end of the said list:

['red', 'green', 'black', 'orange', 'white']

Original list:

['red', 'green', 'white', 'black', 'orange']

Move red at the end of the said list:

['green', 'white', 'black', 'orange', 'red']

Original list:
['red', 'green', 'white', 'black', 'orange']

Move black at the end of the said list:
['red', 'green', 'white', 'orange', 'black']


"""

def remove_element(number,element):
  for x in number:
    if element in x:
      number.remove(element)
      number.append(element)
  return number
number=['red', 'green', 'black', 'orange', 'white']
element='white'
print("\norginal list",number)
print("Move white at the end of the said list:")
print(remove_element(number,element))
element='red'
print("\norginal list",number)
print("Move red at the end of the said list:")
print(remove_element(number,element))
element='black'
print("\norginal list",number)
print("Move red at the end of the said list:")
print(remove_element(number,element))

"""197. Write a Python program to compute the average of the n-th element in a given list of lists with different lengths.
Original list:
[[0, 1, 2], [2, 3, 4], [3, 4, 5, 6], [7, 8, 9, 10, 11], [12, 13, 14]]

Average of n-th elements in the said list of lists with different lengths:

[4.8, 5.8, 6.8, 8.0, 11.0]
"""

def average_of_nth_element(list_of_lists, n):
    # Initialize a list to store the n-th elements
    nth_elements = []

    # Iterate through each list in the given list of lists
    for sublist in list_of_lists:
        # Check if the current sublist has an n-th element
        if n < len(sublist):
            # Append the n-th element to the nth_elements list
            nth_elements.append(sublist[n])
            print(nth_elements)

    # Calculate the average of the nth_elements list
    if nth_elements:
        average = sum(nth_elements) / len(nth_elements)
        return average
    else:
        return None  # Return None if there are no n-th elements

# Original list of lists
list_of_lists = [[0, 1, 2], [2, 3, 4], [3, 4, 5, 6], [7, 8, 9, 10, 11], [12, 13, 14]]

# Choose the n-th element (let's say n=2)
n = 2

# Compute the average of the n-th elements in the list of lists
result = average_of_nth_element(list_of_lists, n)

# Print the result
print(f"Average of {n}-th elements in the said list of lists with different lengths:")
print(result)

from numpy import mean
from itertools import zip_longest

def aon(lsts):
  res=[]
  for i in zip_longest(*lsts)):
    eff_num=[j for j in i if isinstance(j,int) or isinstance(j,float)]
    res.append(mean(eff_num))
  return res

print(aon([[0, 1, 2], [2, 3, 4], [3, 4, 5, 6], [7, 8, 9, 10, 11], [12, 13, 14]]))

"""198. Write a Python program to compare two given lists and find the indices of the values present in both lists.
Original lists:
[1, 2, 3, 4, 5, 6]

[7, 8, 5, 2, 10, 12]

Compare said two lists and get the indices of the values present in both lists:
[1, 4]

Original lists:

[1, 2, 3, 4, 5, 6]

[7, 8, 5, 7, 10, 12]

Compare said two lists and get the indices of the values present in both lists:
[4]

Original lists:
[1, 2, 3, 4, 15, 6]

[7, 8, 5, 7, 10, 12]

Compare said two lists and get the indices of the values present in both lists:
[]
"""

def indices(number,number2):
  new_values=[i for i,value in enumerate(number) if value in number2]
  return new_values
n1=[1, 2, 3, 4, 5, 6]
n2=[7, 8, 5, 2, 10, 12]

print(n1)
print(n2)

print("Compare said two lists and get the indices of the values present in both lists",indices(n1,n2))
n3=[1, 2, 3, 4, 15, 6]

n4=[7, 8, 5, 7, 10, 12]
print(n3)
print(n4)
print("Compare said two lists and get the indices of the values present in both lists",indices(n3,n4))
n5=[1, 2, 3, 4, 5, 6]

n6=[7, 8, 5, 7, 10, 12]
print(n5)
print(n6)
print("Compare said two lists and get the indices of the values present in both lists",indices(n5,n6))

"""199. Write a Python program to convert a Unicode list to a list of strings.
Original lists:
['S001', 'S002', 'S003', 'S004']

Convert the said unicode list to a list contains strings:

['S001', 'S002', 'S003', 'S004']

"""

def new_number(number):
  new_line=[str(universe)  for universe in number]
  return new_line
number= ['S001', 'S002', 'S003', 'S004']
print(new_number(number))

"""
200. Write a Python program to pair consecutive elements of a given list.
Original lists:
[1, 2, 3, 4, 5, 6]

Pair up the consecutive elements of the said list:

[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]

Original lists:

[1, 2, 3, 4, 5]

Pair up the consecutive elements of the said list:

[[1, 2], [2, 3], [3, 4], [4, 5]]
"""

def new_number(number):

  new_line=[[number[i],number[i+1]] for i in range(len(number)-1)]
  return new_line
nassign=[1, 2, 3, 4, 5, 6]
print('Pair up the consecutive elements of the said list:')
print(new_number(nassign))
number1=[1, 2, 3, 4, 5]
print('Pair up the consecutive elements of the said list:')
print(new_number(number1))

def list_cmp(list1,list2):
  new_line=(x for x in list1 if list2 in x)
  return bool(new_line)



list1=['.com', '.edu', '.tv']
list2=['.com', '.edu', '.tv']
list3="https://www.w3resource.net"
list4=['.com', '.edu', '.tv']


print(list_cmp(list1,list2))
print(list_cmp(list3,list4))

"""202. Write a Python program to find the indexes of all None items in a given list.

Original list:

[1, None, 5, 4, None, 0, None, None]

Indexes of all None items of the list:
[1, 4, 6, 7]

Click me to see the sample solution
"""

def get_index(number):
  new_number=[x for x,values in enumerate(number) if  not isinstance(values,int)]
  return new_number
number=[1, None, 5, 4, None, 0, None, None]
print(get_index(number))

def new_list(number):
  return [number[x]+number[x+1] for x in range(0,len(number),2)]
number=['1', '2', '3', '4', '5', '6', '7', '8']


print("Join adjacent members of a given list",number)
print(new_list(number))
number1=['1', '2']

print("Join adjacent members of a given list",number1)
print(new_list(number1))

# Original list
original_list = ['1', '2', '3', '4', '5', '6', '7', '8']

# Initialize an empty list to store joined adjacent members
joined_list = []

# Iterate over pairs of adjacent elements and concatenate them
for i in range(0, len(original_list), 2):
    joined_list.append(original_list[i] + original_list[i + 1])

# Print the results
print("Original list:")
print(original_list)
print("\nJoin adjacent members of the given list:")
print(joined_list)

"""204. Write a Python program to check if the first digit or character of each element in a list is the same.
Original list:
[1234, 122, 1984, 19372, 100]

Check if first digit in each element of the said given list is same or not!
True
Original list:

[1234, 922, 1984, 19372, 100]

Check if first digit in each element of the said given list is same or not!
False
Original list:

['aabc', 'abc', 'ab', 'a']

Check if first character in each element of the said given list is same or not!
True
Original list:
['aabc', 'abc', 'ab', 'ha']

Check if first character in each element of the said given list is same or not!
False
"""

def check_first_letter_of_the_word(number):
  new_line=str(number[0])[0]
  print(new_line)
  new_ones=(all(str(x)[0]==new_line for x in number))
  return new_ones
number= [1234, 122, 1984, 19372, 100]
print("Check if first digit in each element of the said given list is same or not! ",check_first_letter_of_the_word(number))
number1=['aabc', 'abc', 'ab', 'a']
print(number1)
print("Check if first digit in each element of the said given list is same or not!",check_first_letter_of_the_word(number1))
number2=['aabc', 'abc', 'ab', 'ha']
print("Check if first digit in each element of the said given list is same or not!",check_first_letter_of_the_word(number2))

"""205. Write a Python program to find the indices of elements in a given list that are greater than a specified value.

Original list:

[1234, 1522, 1984, 19372, 1000, 2342, 7626]

Indices of elements of the said list, greater than 3000


[3, 6]
Original list:
[1234, 1522, 1984, 19372, 1000, 2342, 7626]
Indices of elements of the said list, greater than 20000
[]
"""

def greater_values(number,n):
  new_line=[x for x ,value in enumerate(number) if value>n]
  return new_line
number=[1234, 1522, 1984, 19372, 1000, 2342, 7626]
n=3000
print("Indices of elements of the said list, greater than 3000",greater_values(number,n))
n=20000
print("Indices of elements of the said list, greater than 3000",greater_values(number,n))

"""06. Write a Python program to remove additional spaces from a given list.
Original list:
['abc ', ' ', ' ', 'sdfds ', ' ', ' ', 'sdfds ', 'huy']

Remove additional spaces from the said list:

['abc', '', '', 'sdfds', '', '', 'sdfds', 'huy']

Click me to see the sample solution

"""

def remove_spaces(number):
  new_number=[x.strip() for x in number]
  return new_number
number=['abc', '', '', 'sdfds', '', '', 'sdfds', 'huy']
print(remove_spaces(number))

"""207. Write a Python program to find the common tuples between two given lists.
Original lists:

[('red', 'green'), ('black', 'white'), ('orange', 'pink')]


[('red', 'green'), ('orange', 'pink')]
Common tuples between two said lists
[('orange', 'pink'), ('red', 'green')]

Original lists:
[('red', 'green'), ('orange', 'pink')]

[('red', 'green'), ('black', 'white'), ('orange', 'pink')]

Common tuples between two said lists
[('orange', 'pink'), ('red', 'green')]

"""

def common(list1,list2):
  new_one=set(list1)
  new_two=set(list2)
  new_third=list(new_one.intersection(new_two))
  return new_third
l1=[('red', 'green'), ('black', 'white'), ('orange', 'pink')]
l2=[('red', 'green'), ('orange', 'pink')]
print(common(l1,l2))

def new_common(list1,list2):
  numbers=set(list1).intersection(list2)
  return list(numbers)
one= [('red', 'green'), ('orange', 'pink')]
tw0=[('red', 'green'), ('black', 'white'), ('orange', 'pink')]
print("Common tuples between two said lists",new_common(one,tw0))

def line_common(list1 ,list2):
  new_sector=[x for x in list1 if list2 in x]
  return new_sector
_x= [('red', 'green'), ('orange', 'pink')]
_y=[('red', 'green'), ('black', 'white'), ('orange', 'pink')]
print("Common tuples between two said lists",new_common(_x,_y))

def common_filter(list1,list2):
  new_value=list(filter(lambda x:x in list2,list1))
  return new_value
new_set1= [('red', 'green'), ('orange', 'pink')]
new_set2=[('red', 'green'), ('black', 'white'), ('orange', 'pink')]
print("Common tuples between two said lists",common_filter(new_set1,new_set2))
l3=[('red', 'green'), ('black', 'white'), ('orange', 'pink')]

l4=[('red', 'green'), ('orange', 'pink')]
print("Common tuples between two said lists",common_filter(new_set1,new_set2))

def common1_filter(list1,list2):
  new_values1=list(filter(lambda x:x in list2,list1))
  return new_values1

n1=[1,2,4,5,6]
n2=[1,2,6]
print(common1_filter(n1,n2))

"""208. Sum a list of numbers. Write a Python program to sum the first number with the second and divide it by 2, then sum the second with the third and divide by 2, and so on.
Original list:
[1, 2, 3, 4, 5, 6, 7]

Sum the said list of numbers:

[1.5, 2.5, 3.5, 4.5, 5.5, 6.5]


Original list:

[0, 1, -3, 3, 7, -5, 6, 7, 11]

Sum the said list of numbers:
[0.5, -1.0, 0.0, 5.0, 1.0, 0.5, 6.5, 9.0]
"""

def divide_by_two(number):
  new_angel=[(number[i]+number[i+1])/2 for i in range(0,len(number)-1)]
  return new_angel
number=[1, 2, 3, 4, 5, 6, 7]
print("Sum the said list of numbers:",divide_by_two(number))
number1=[0, 1, -3, 3, 7, -5, 6, 7, 11]
print("Sum the said list of numbers: ",divide_by_two(number1))

a = [3, 4, 6, 2, 0, 0, 0 , 0, 0, 0, 6, 7, 6, 9, 10, 0, 0, 0, 0, 0, 5, 9, 9, 7, 4, 4, 0, 0, 0, 0, 0, 0, 5, 3, 2, 9, 7, 1]

d = min([ i for i in range(len(a)) if a[i] > 0 ])
print(d)
c = [ i for i in range(d,len(a)-1) if a[i] == 0 and a[i+1] != 0]
print(len(c)+1)

"""Write a Python program to count the number of groups of non-zero numbers separated by zeros in a given list of numbers.

Original list:
[3, 4, 6, 2, 0, 0, 0, 0, 0, 0, 6, 7, 6, 9,
10, 0, 0, 0, 0, 0, 5, 9, 9, 7, 4, 4,
0, 0, 0, 0, 0, 0, 5, 3, 2, 9, 7, 1]
Number of groups of non-zero numbers separated by zeros of the said list: 4

"""

from itertools import groupby
def count_of_the_non_zeroes(number):
  group=groupby(number,lambda x:x==0)
  print(group)
  new_ones=sum(1 for key,group in group if not key)
  return new_ones
number=[3, 4, 6, 2, 0, 0, 0, 0, 0, 0, 6, 7, 6, 9, 10, 0, 0, 0, 0, 0, 5, 9, 9, 7, 4, 4, 0, 0, 0, 0, 0, 0, 5, 3, 2, 9, 7, 1]
print(count_of_the_non_zeroes(number))

def non_zeroes_sum(numbers):
  result=[]
  element=0
  for digit in numbers:
    if digit==0:
      if element!=0:
        result.append(element)
        element=0
    else:
      element+=digit
  if element>0:
    result.append(element)
  return result
number=[3, 4, 6, 2, 0, 0, 0, 0, 0, 0, 6, 7, 6, 9, 10, 0, 0, 0, 0, 0, 5, 9, 9, 7, 4, 4, 0, 0, 0, 0, 0, 0, 5, 3, 2, 9, 7, 1]
print(non_zeroes_sum(number))

from itertools import groupby
def count_of_the_non_zeroes_sum(number):
  group=groupby(number,lambda x:x==0)
  print(group)
  new_ones=[sum(group) for key,group in group if not key]
  return new_ones
number=[3, 4, 6, 2, 0, 0, 0, 0, 0, 0, 6, 7, 6, 9, 10, 0, 0, 0, 0, 0, 5, 9, 9, 7, 4, 4, 0, 0, 0, 0, 0, 0, 5, 3, 2, 9, 7, 1]
print(count_of_the_non_zeroes_sum(number))

"""211. Write a Python program to remove an element from a given list.
Original list:
['Ricky Rivera', 98, 'Math', 90, 'Science']

After deleting an element:, using index of the element: [98, 'Math', 90, 'Science']

"""

new_list=['Ricky Rivera', 98, 'Math', 90, 'Science']
del new_list[0]
print(new_list)

"""212. Write a Python program to remove all values except integer values from a given array of mixed values.
Original list: [34.67, 12, -94.89, 'Python', 0, 'C#']

After removing all the values except integer values from the said array of mixed values: [12, 0]

"""

def remove_str_float(number):
  numeric_numbers=[x for x in number if not(isinstance(x,str) or isinstance(x,float))]
  return numeric_numbers
number=[34.67, 12, -94.89, 'Python', 0, 'C#']
print("After removing all the values except integer values from the said array of mixed values:",remove_str_float(number))

Original list elements: [-14, 15, -10, -11, -12, -13, 16, 17, 18, 19, 20]
Sum of two lowest negative numbers of the said array of integers: -27
Original list elements: [-4, 5, -2, 0, 3, -1, 4, 9]
Sum of two lowest negative numbers of the said array of integers: -6

number=[-14, 15, -10, -11, -12, -13, 16, 17, 18, 19, 20]
print(min(number))
number1=[15, -10, -11, -12, -13, 16, 17, 18, 19, 20]
print(min(number1))

"""213. Write a Python program to calculate the sum of two lowest negative numbers in a given array of integers.

An integer (from the Latin integer meaning "whole") is colloquially defined as
a number that can be written without a fractional component. For example, 21,
4, 0, and -2048 are integers.

Original list elements: [-14, 15, -10, -11, -12, -13, 16, 17, 18, 19, 20]

Sum of two lowest negative numbers of the said array of integers: -27

Original list elements: [-4, 5, -2, 0, 3, -1, 4, 9]

Sum of two lowest negative numbers of the said array of integers: -6




"""

def min_negative_sum_of_two_negative(number):
  new_one=[x for x in number ]
  if len(new_one)>=2:
    sorted_number=sorted(new_one)

    sum_of_two_number=sum(sorted_number[:2])
    return sum_of_two_number
number=[-14, 15, -10, -11, -12, -13, 16, 17, 18, 19, 20]
print("Sum of two lowest negative numbers of the said array of integers:",min_negative_sum_of_two_negative(number))


number1=[-4, 5, -2, 0, 3, -1, 4, 9]
print("Sum of two lowest negative numbers of the said array of integers:",min_negative_sum_of_two_negative(number1))

"""214. Write a Python program to sort a given positive number in descending/ascending order.

Descending -> Highest to lowest.

Ascending -> Lowest to highest

Original Number: 134543

Descending order of the said number: 544331
Ascending order of the said number: 133445

Original Number: 43750973

Descending order of the said number: 97754330

Ascending order of the said number: 3345779

"""

def sort_values_asc_des(list):

  number3=sorted(list)
  number4=sorted(list,reverse=True)
  a="".join(number3)
  b="".join(number4)
  print("Ascending order of the said number",a)
  print("Descending order of the said number",b)

number='134543'
sort_values_asc_des(number)
number1='43750973'
sort_values_asc_des(number1)

"""215. Write a Python program to merge two or more lists into a list of lists, combining elements from each of the input lists based on their positions.
Sample Output:
After merging lists into a list of lists:

[['a', 1, True], ['b', 2, False]]

[['a', 1, True], [None, 2, False]]

[['a', 1, True], ['_', 2, False]]

"""

def merge_list(*list):

  new_lis=zip(*list)
  new_line=[list(x) for x in new_lis]
  return list(new_line)
list1 = ['a', 'b', '_']
list2 = [1, 2, 2]
list3 = [True, False, False]
print(merge_list(list1,list2,list3))

# Merge two or more lists into a list of lists
def merge_lists(*lists):
    # Zip the lists together to create tuples of corresponding elements
    merged = zip(*lists)
    # Convert each tuple to a list and create a list of lists
    result = [list(x) for x in merged]
    return result

# Example usage
list1 = ['a', 'b', '_']
list2 = [1, 2, 2]
list3 = [True, False, False]

# Call the merge_lists function with the lists
result = merge_lists(list1, list2, list3)

# Print the result
print(result)

def merge1_list(list1,list2,lsit3):
  result=[list(x) for x in zip(list1,list2,list3)]
  return result


list1 = ['a', 'b', '_']
list2 = [1, 2, 2]
list3 = [True, False, False]
print(merge1_list(list1,list2,list3))

"""Python List: Exercise - 217 with Solution
Write a Python program to split values into two groups, based on the result of

217. Write a Python program to split values into two groups, based on the
result of the given filtering function.


Sample Output:

[['white'], ['red', 'green', 'black']]





the given filtering function.
"""

def split_values(number,fn):
  new_number=[x for x in number if fn(x)]
  new_ones=[x for x in  number if not fn(x)]
  return [new_number,new_ones]
number=['red', 'green', 'black','White']
print(split_values(number,lambda x:x[0]=='W'))

"""218. Write a Python program to sort one list based on another list containing the desired indexes.
Sample Output:

['apples', 'bread', 'eggs', 'jam', 'milk', 'oranges']

['oranges', 'milk', 'jam', 'eggs', 'bread', 'apples']

"""

number=['apples', 'bread', 'eggs', 'jam', 'milk', 'oranges']
new_one=[]
for x in reversed(number):
  new_one.append(x)

print(new_one)

"""221. Write a Python program to randomize the order of the values of a list, returning a new list.
Sample Output:
Original list: [1, 2, 3, 4, 5, 6]

Shuffle the elements of the said list:

[3, 2, 4, 1, 6, 5]
"""

import random
number= [1, 2, 3, 4, 5, 6]
random.shuffle(number)
print(number)

"""Write a Python program to create a list with non-unique values filtered out.

print(filter_non_unique([1, 2, 2, 3, 4, 4, 5]))
"""

numbers=[1, 2, 2, 3, 4, 4, 5]
new_line=[]
for x in numbers:
  if x not in new_line:
    new_line.append(x)
print(new_line)

# Import the 'Counter' class from the 'collections' module.

from collections import Counter

# Define a function called 'filter_non_unique' that takes a list 'lst' as an argument.
def filter_non_unique(lst):
  # Create a list of items and their corresponding counts using the 'Counter' class.
  # Filter this list to include only items with a count of 1.
  return [item for item, count in Counter(lst).items() if count == 1]

# Example: Filter out non-unique elements from a list.
print(filter_non_unique([1, 2, 2, 3, 4, 4, 5]))

# Import the 'Counter' class from the 'collections' module.
from collections import Counter

# Define a function called 'filter_unique' that takes a list 'lst' as an argument.
def filter_unique(lst):
  # Create a list of items and their corresponding counts using the 'Counter' class.
  # Filter this list to include only items with a count greater than 1.
  return [item for item, count in Counter(lst).items() if count > 1]

# Example: Filter out unique elements from a list.
print(filter_unique([1, 2, 2, 3, 4, 4,5]))

"""Write a Python program to find the indexes of all elements in the given list that satisfy the provided testing function.


Use enumerate() and a list comprehension to return the indexes of the all

element in lst for which fn returns True.
"""

def new_functions(numbers,fn):
  return [i for i,values  in enumerate(number) if fn(values)]
number=[1,2,3,4]
print(new_functions(numbers,lambda x:x%2==1))

"""231. Write a Python program to split values into two groups, based on the result of the given filter list.

Sample Output:
[['red', 'green', 'pink'], ['blue']]

Click me to see the sample solution

"""

def split_values(number,fn):

  new_ones=[x for x in  number if not fn(x)]
  new_number=[x for x in number if fn(x)]
  return [new_ones,new_number]
number=number=['red','green','pink','blue']
print(split_values(number,lambda x:x[0]=='b'))

"""232. Write a Python program to chunk a given list into smaller lists of a specified size.
Sample Output:

[[1, 2, 3], [4, 5, 6], [7, 8]]
"""

def divide_numbers(numbers,n):
  new_numbers=[numbers[i:i+n] for i in range(0,len(numbers)-1,n)]
  return new_numbers
numbers=[1,2,3,4,5,6,7,8]
n=3
print(divide_numbers(numbers,n))

"""233. Write a Python program to chunk a given list into n smaller lists.
Sample Output:
[[1, 2], [3, 4], [5, 6], [7]]
"""

def smaller_parts(numbers,n):
  new_numbers=[numbers[i:i+n] for i in range(0,len(numbers)-1,n)]
  return new_numbers
numbers=[1,2,3,4,5,6,7]
n=2
print(divide_numbers(numbers,n))

"""Write a Python program to convert a given number (integer) to a list of digits.

Use map() combined with int on the string representation of n and return a list from the result.

Sample Solution:
"""

def digitalize(number):
  return list(map(int,str(number)))
number=1234
print(type(number))
print(digitalize(number))
number1=3467
print(digitalize(number1))

def string_int_conversion(number):
  new_number=str(number)
  new_values=[int(digits) for digits in new_number]
  return new_values

number=3456
print(string_int_conversion(number))