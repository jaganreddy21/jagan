# -*- coding: utf-8 -*-
"""Untitled83.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1arLZCO4w1MgGRwhPRYTL86pUfKGhy_kn
"""

t1 = [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2]
l = len(t1) #int(input('Enter lng : '))
occ = 0
n = int(input("Enter the occ_numbre: "))
for i in range(l):
  if t1[i] == n :
    zocc += 1
print(occ)



from collections import Counter

def find_most_occurrences(lst):
    # Use Counter to count occurrences of each element in the list
    counter = Counter(lst)
    print(counter)
    # Find the item with the maximum occurrences using max and a custom key function
    most_common_item = max(counter, key=counter.get)

    return most_common_item

# Example usage:
my_list = [1, 2, 3, 1, 2, 3, 1, 1, 4, 5, 4, 4, 4]
result = find_most_occurrences(my_list)

print(f"The item with the most occurrences is: {result}")

from collections import Counter

def find_most_occurrences(lst):
    # Use Counter to count occurrences of each element in the list
    counter = Counter(lst)

    # Sort the items based on their counts in descending order
    sorted_items = sorted(counter.items(), key=lambda x: x[1], reverse=True)

    # The first item in the sorted list has the highest count
    most_common_item = sorted_items[0][0]

    return most_common_item

# Example usage:
my_list = [1, 2, 3, 1, 2, 3, 1, 1, 4, 5, 4, 4, 4]
result = find_most_occurrences(my_list)

print(f"The item with the most occurrences is: {result}")

"""Original list:
[2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2]

Index list:

[0, 3, 5, 7, 10]

Items with specified index of the said list:

[2, 4, 9, 2, 1]
"""

def index_based(nums,index1):
 result= [nums[i] for i in index1]
 return result
nums= [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2]
index1=[0, 3, 5, 7, 10]
print(index_based(nums,index1))

new_list= [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2]
li=[0, 3, 5, 7, 10]
cf=[]
for x in li:
  cf.append(new_list[x])
print(cf)

"""112. Write a Python program to check whether a specified list is sorted or not.
Original list:
[1, 2, 4, 6, 8, 10, 12, 14, 16, 17]

Is the said list is sorted!


True

Original list:
[1, 2, 4, 6, 8, 10, 12, 14, 16, 17]

Is the said list is sorted!
False
"""

a= [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]
b=sorted(a)
if a==b:
  print('True')
else:
  print('False')

print('True' if a==b else
      'Flase')

def sorted_elements(nums):
  a=nums
  b=sorted(a)
  if a==b:
    return True
  return False
print(sorted_elements([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]))

"""{'Green': '#008000'}, {'Black': '#000000'}, {'Blue': '#0000FF'}, {'Green': '#008000'}]
After removing duplicate dictionary of the said list:

[{'Black': '#000000'}, {'Blue': '#0000FF'}, {'Green': '#008000'}]
"""

new_guy=[{'Green': '#008000'}, {'Black': '#000000'}, {'Blue': '#0000FF'}, {'Green': '#008000'}]
old_guy=[]
for x in new_guy:
  if x not in old_guy:
    old_guy.append(x)
print(old_guy)

""" Write a Python program to extract the nth element from a given list of tuples.

Original list:
[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94),

('Beau Turnbull', 94, 98)]
Extract nth element ( n = 0 ) from the said list of tuples:

['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']

Extract nth element ( n = 2 ) from the said list of tuples:

[99, 96, 94, 98]
"""

def extract_nth_element(list1,n):
  result=[x[n] for x in list1]
  return result
list1=[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94),

('Beau Turnbull', 94, 98)]
n=2
print("orginal list:")
print(list1)

print("Extract nth element ( n =",n," ) from the said list of tuples")
print(extract_nth_element(list1,n))
n=1
print("orginal list")
print(list1)
print("Extract nth element ( n =",n," ) from the said list of tuples")
print(extract_nth_element(list1,n))

n=0
print("orginal list")
print(list1)
print("Extract nth element ( n =",n," ) from the said list of tuples")
print(extract_nth_element(list1,n))

"""115. Write a Python program to check if the elements of a given list are unique or not.
Original list:

[1, 2, 4, 6, 8, 2, 1, 4, 10, 12, 14, 12, 16, 17]

Is the said list contains all unique elements!
False

Original list:

[2, 4, 6, 8, 10, 12, 14]

Is the said list contains all unique elements!
True
"""

new_list=[1, 2, 4, 6, 8, 2, 1, 4, 10, 12, 14, 12, 16, 17]
new_list1=set(new_list)
print(new_list1)
print('True' if new_list==new_list1 else 'False')

def unique_values(new_list):
  new_list=[1, 2, 4, 6, 8, 2, 1, 4, 10, 12, 14, 12, 16, 17]
  new_list1=set(new_list)
  print(new_list1)
  if new_list==new_list1:
    return True
  return False
new_list=[1, 2, 4, 6, 8, 2, 1, 4, 10, 12, 14, 12, 16, 17]
print(unique_values(new_list))

"""[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94),

('Beau Turnbull', 94, 98)]
Sort the said list of lists by a given index ( Index = 0 ) of the inner list


[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]

Sort the said list of lists by a given index ( Index = 2 ) of the inner list


[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]
"""

def sorted_elements(new_list,n):
  result=sorted(new_list,key=lambda x:x[n])
  return result

new_list=[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94),

('Beau Turnbull', 94, 98)]
n=0
print(sorted_elements(new_list,n))
n=2
print(sorted_elements(new_list,n))

"""115. Write a Python program to check if the elements of a given list are unique or not.
Original list:

[1, 2, 4, 6, 8, 2, 1, 4, 10, 12, 14, 12, 16, 17]

Is the said list contains all unique elements!
False

Original list:

[2, 4, 6, 8, 10, 12, 14]

Is the said list contains all unique elements!

True
"""

def unique_elements(number):
  l=number
  l1=list(set(l))
  if l==l1:
    return True
  else:
    return False
print(unique_elements([1, 2, 4, 6, 8, 2, 1, 4, 10, 12, 14, 12, 16, 17]))
print(unique_elements([2, 4, 6, 8, 10, 12, 14]))

number=[2, 4, 6, 8, 10, 12, 14]
number1=list(set(number))
number2=[1, 2, 4, 6, 8, 2, 1, 4, 10, 12, 14, 12, 16, 17]
number3=list(set(number2))
print('True' if number==number1 else 'False')
print('True' if number2==number3 else 'False')

def sorted_elements(new_list,n):
  result=sorted(new_list,key=lambda x:x[n])
  return result

"""117. Write a Python program to remove all elements from a given list that are present in another list.
Original lists:

list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
list2: [2, 4, 6, 8]
Remove all elements from 'list1' present in 'list2:

[1, 3, 5, 7, 9, 10]

"""

list1= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
list2=[2, 4, 6, 8]
list3=[]
for x in list1:
  if x not in list2:
    list3.append(x)
print(list3)

def index_on_inner_list(list1, list2):
    # Use a list comprehension to iterate through list1 and keep elements that are not in list2
    result = [x for x in list1 if x not in list2]
    return result

# Create two lists 'list1' and 'list2'
list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
list2 = [2, 4, 6, 8]

# Print messages indicating the original lists
print("Original lists:")
print("list1:", list1)
print("list2:", list2)

# Print a message indicating the operation to remove elements from 'list1' present in 'list2'
print("\nRemove all elements from 'list1' that are also present in 'list2:")
# Call the 'index_on_inner_list' function with 'list1' and 'list2' and print the result
print(index_on_inner_list(list1, list2))

"""119. Write a Python program to check if a substring appears in a given list of string values.
Original list:

['red', 'black', 'white', 'green', 'orange']

Substring to search:

ack
Check if a substring presents in the said list of string values:

True
Substring to search:
abc
Check if a substring presents in the said list of string values:
False
"""

def new_string(word,n):
  if any(n in s for s in word):

     return True
  else:
    return False


word=['red', 'black', 'white', 'green', 'orange']
n='ack'
print(new_string(word,n))
n='abc'
print(new_string(word,n))

# Define a function 'find_substring' that checks if a substring is present in any of the strings in a list
def find_substring(str1, sub_str):
    # Use a generator expression and 'any' to check if 'sub_str' is in any of the strings in 'str1'
    if any(sub_str in x for x in str1):
        return True
    return False
str1=['red', 'black', 'white', 'green', 'orange']
sub_str='ack'
print(find_substring(str1,sub_str))
sub_str='abc'
print(find_substring(str1,sub_str))
# Create a list 'colors' with string values

color=['red', 'black', 'white', 'green', 'orange']
for x in color :
  print('True' if 'ack' in x  else 'False')

def sub_string1(string1,sub_str1):
  for x in string1:
    if x in sub_str1:
      return 'True'
    else:
      return 'False'

string1=['red', 'black', 'white', 'green', 'orange']
sub_str1='ack'

print(find_substring(str1,sub_str1))
sub_str1='abc'

print(find_substring(str1,sub_str1))
sub_str1='mno'

print(find_substring(str1,sub_str1))

"""120. Write a Python program to create a list taking alternate elements from a given list.
Original list:

['red', 'black', 'white', 'green', 'orange']

List with alternate elements from the said list:
['red', 'white', 'orange']

Original list:

[2, 0, 3, 4, 0, 2, 8, 3, 4, 2]

List with alternate elements from the said list:
[2, 3, 0, 8, 4]
"""

color=['red', 'black', 'white', 'green', 'orange']
print(color)
print(color[0::2])
number=[2, 0, 3, 4, 0, 2, 8, 3, 4, 2]
print(number)
print(number[0::2])

"""121. Write a Python program to find nested list elements that are present in another list.
Original lists:

[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]

[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]

Intersection of said nested lists:
[[12], [7, 11], [1, 5, 8]]
"""

flat_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
nested_lists = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]

# Convert the flat list to a set for faster membership tests

flat_list=set(flat_list)
# Initialize an empty list to store the results
intersection_result = []

# Find the intersection of elements between the flat list and each nested list
for sublist in nested_lists:
  print(sublist)
  intersection_result.append(list(set(sublist) & flat_set))

# Print the original lists and the intersection result
print("Flat List:", flat_list)
print("Nested Lists:", nested_lists)
print("Intersection of said nested lists:", intersection_result)

# Define a function 'intersection_nested_lists' that finds the intersection of elements between two nested lists
def intersection_nested_lists(l1, l2):
    # Use a list comprehension to iterate over 'l2', filtering elements that are present in 'l1'
    result = [[n for n in lst if n in l1] for lst in l2]
    # Return the 'result' list containing the intersections
    return result

# Create a list 'nums1' with integer values
nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
# Create a nested list 'nums2' with sublists containing integer values
nums2 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]
# Print a message indicating the original lists
print("\nOriginal lists:")
# Print the contents of 'nums1'
print(nums1)
# Print the contents of 'nums2'
print(nums2)
# Print a message indicating the operation to find the intersection of nested lists
print("\nIntersection of said nested lists:")
# Call the 'intersection_nested_lists' function with 'nums1' and 'nums2', then print the result
print(intersection_nested_lists(nums1, nums2))

def number(nums1,nums2):
  result=[[n for n in bs if n in nums1]for bs in nums2]
  return result





nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
# Create a nested list 'nums2' with sublists containing integer values
nums2 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]
print(number(nums1,nums2))

"""123. Write a Python program to reverse strings in a given list of string values.
Original lists:
['Red', 'Green', 'Blue', 'White', 'Black']

Reverse strings of the said given list:

['deR', 'neerG', 'eulB', 'etihW', 'kcalB']

Click me to see the sample solution


"""

new_one=['Red', 'Green', 'Blue', 'White', 'Black']
new_ones=[]
for x in new_one:
  new_ones.append(x[::-1])
print(new_ones)

inputList = [[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 15, 16, 18]]

# Those from first list not present in the rest of the lists...
notCommonList = [x for x in inputList[0] for y in inputList[1:] if x not in y]

# Those in first list that are not in notCommonList are common...
outputList = [x for x in inputList[0] if x not in notCommonList]

print(outputList)
print(notCommonList)

def find_common_elements(nested_list):
    # Use the first sublist as the initial set for comparison
    common_elements_set = set(nested_list[0])

    # Iterate through the remaining sublists and find the common elements
    for sublist in nested_list[1:]:
        common_elements_set &= set(sublist)

    # Convert the set to a list for the final result
    common_elements_list = list(common_elements_set)

    return common_elements_list

# Original lists
nested_lists = [[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]

print("Original lists:")
# Print the contents of the nested list
for sublist in nested_lists:
    print(sublist)

# Find common element(s) in nested lists
common_elements = find_common_elements(nested_lists)

print("\nCommon element(s) in nested lists:")
# Print the result
print(common_elements)

def common_elements(nested_list):
  number=set(nested_list[0])
  for x in nested_list[1:]:
    number&=set(x)
    number3=list(number)
  return number3
  for y in nested_list:
    print(y)

nested_list = [[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]
print(common_elements(nested_list))

"""124. Write a Python program to find the maximum and minimum product of pairs of tuples within a given list.
The original list, tuple :

[(2, 7), (2, 6), (1, 8), (4, 9)]

Maximum and minimum product from the pairs of the said tuple of list:
(36, 8)
"""

def minimum_products(numbers):
 result1=min([abs(x*y) for x,y in numbers])
 result2=max([abs(x*y) for x,y in numbers])

 return result1,result2
numbers=[(2, 7), (2, 6), (1, 8), (4, 9)]
print(minimum_products(numbers))

numbers=[(2, 7), (2, 6), (1, 8), (4, 9)]
print(len(numbers))
z=[x[0]*x[1] for x in numbers]
print((min(z),max(z)))

"""125. Write a Python program to calculate the product of the unique numbers in a given list.
Original List : [10, 20, 30, 40, 20, 50, 60, 40]

Product of the unique numbers of the said list: 720000000

"""

number= [10, 20, 30, 40, 20, 50, 60, 40]
number1=set(number)
number2=list(number1)
print(number2)
temp=1
for x in number2:
  temp*=x
print(temp)

"""26. Write a Python program to interleave multiple lists of the same length.
Original list:
list1: [1, 2, 3, 4, 5, 6, 7]

list2: [10, 20, 30, 40, 50, 60, 70]
\
list3: [100, 200, 300, 400, 500, 600, 700]

Interleave multiple lists:
[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]
"""

list1=[1, 2, 3, 4, 5, 6, 7]
list2=[10, 20, 30, 40, 50, 60, 70]
list3=[100, 200, 300, 400, 500, 600, 700]
list4=[]
for x in range(len(list1)):
  list4.append(list1[x])
  list4.append(list2[x])
  list4.append(list3[x])
print(list4)

new_ls=[]
for i in zip(list1,list2,list3):
  new_ls.extend(i)
print(new_ls)

list1=[1, 2, 3, 4, 5, 6, 7]
list2=[10, 20, 30, 40, 50, 60, 70]
list3=[100, 200, 300, 400, 500, 600, 700]

number10=[]
[number10.extend(x) for x in zip(list1,list2,list3)]
print(number10)

a = [1, 2, 3, 4, 5, 6, 7]
b = [10, 20, 30, 40, 50, 60, 70]
c = [100, 200, 300, 400, 500, 600, 700]
x = []
[x.extend(i) for i in zip(a ,b, c) ]
print(x)

"""152. Write a Python program to combine two sorted lists using the heapq module.\

Original sorted lists:

[1, 3, 5, 7, 9, 11]
[0, 2, 4, 6, 8, 10]
After merging the said two sorted lists:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
"""

a=[1, 3, 5, 7, 9, 11]
b=[0, 2, 4, 6, 8, 10]
c=sorted(a)
d=sorted(b)
e=sorted(c+d)
print(e)

"""53. Write a Python program to check if a given element occurs at least n times in a list.
Original list:
[0, 1, 3, 5, 0, 3, 4, 5, 0, 8, 0, 3, 6, 0, 3, 1, 1, 0]


Check if 3 occurs at least 4 times in a list:
True

Check if 0 occurs at least 5 times in a list:

True

Check if 8 occurs at least 3 times in a list:
False
"""

def occurence(numbers,element,mimimum_occurences):

    element1 =numbers.count(element)
    if element1>=mimimum_occurences:
      return True
    else:
      return False

numbers=[0, 1, 3, 5, 0, 3, 4, 5, 0, 8, 0, 3, 6, 0, 3, 1, 1, 0]
element=3
mimimum_occurences=4
print(f"\nCheck if 3 occurs at least {mimimum_occurences} times in a list:")
print(occurence(numbers,element,mimimum_occurences))
element=0
mimimum_occurences=5
print(f"\nCheck if 3 occurs at least {mimimum_occurences} times in a list:")
print(occurence(numbers,element,mimimum_occurences))
element=8
mimimum_occurences=3
print(f"\nCheck if 3 occurs at least {mimimum_occurences} times in a list:")
print(occurence(numbers,element,mimimum_occurences))

def check_occurrences(lst, element, min_occurrences):
    # Count the occurrences of the element in the list
    element_count = lst.count(element)

    # Check if the occurrences meet the specified minimum
    result = element_count >= min_occurrences

    return result

# Original list
original_list = [0, 1, 3, 5, 0, 3, 4, 5, 0, 8, 0, 3, 6, 0, 3, 1, 1, 0]

# Print the original list
print("Original list:")
print(original_list)

# Check if 3 occurs at least 4 times in the list
result_1 = check_occurrences(original_list, 3, 4)
print("\nCheck if 3 occurs at least 4 times in a list:")
print(result_1)

# Check if 0 occurs at least 5 times in the list
result_2 = check_occurrences(original_list, 0, 5)
print("\nCheck if 0 occurs at least 5 times in a list:")
print(result_2)

# Check if 8 occurs at least 3 times in the list
result_3 = check_occurrences(original_list, 8, 3)
print("\nCheck if 8 occurs at least 3 times in a list:")
print(result_3)

"""list1: ['Red color', 'Orange#', 'Green', 'Orange @', 'White']
Character list:
['#', 'color', '@']
New list:
['Red', '', 'Green', 'Orange', 'White']
"""

list1=['Red color', 'Orange#', 'Green', 'Orange @', 'White']
remove_words=['#', 'color', '@']
list3=[]
for x in list1:
  if x not in list2:
    list3.append(x)
print(list3)

nums = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12]
print(len(nums))
start_index=8
end_index=10
sum_of_the_values=sum(nums[start_index:end_index+1])
print(f"start index and ending index between the sum vaue is {sum_of_the_values}")

nums = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12]
start_index=8
end_index=10
if start_index<0:
  print("negative index")
elif end_index==len(nums):
  print("both are equal")
else:
  sum_of_the_values=sum(nums[start_index:end_index+1])
  print(f"start index and end index between the sum of the values are {sum_of_the_values}")

"""129. Write a Python program to reverse each list in a given list of lists.
Original list of lists:
[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]

Reverse each list in the said list of lists:

[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]

Click me to see the sample solution
"""

nums=[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
ns=[list(x[::-1]) for x in nums]
print(ns)

"""130. Write a Python program to count the same pair in three given lists.
Original lists:
[1, 2, 3, 4, 5, 6, 7, 8]

[2, 2, 3, 1, 2, 6, 7, 9]

[2, 1, 3, 1, 2, 6, 7, 9]

Number of same pair of the said three given lists:
3
"""

list1=[1, 2, 3, 4, 5, 6, 7, 8]
list2=[2, 2, 3, 1, 2, 6, 7, 9]
list3=[2, 1, 3, 1, 2, 6, 7, 9]
count=0
for x,y,z in zip(list1,list2,list3):

  if (x==y==z):
    count+=1

print(f'{list1}\n{list2}\n{list3}')
print(f"common values from the {list1},{list2},{list3} {count}")
print(count)

def commom_elements_counts(list1,list2,list3):
  new_ones=sum([x==y==z for x ,y,z in zip(list1,list2,list3)])
  return new_ones
list1=[1, 2, 3, 4, 5, 6, 7, 8]
list2=[2, 2, 3, 1, 2, 6, 7, 9]
list3=[2, 1, 3, 1, 2, 6, 7, 9]
print(commom_elements_counts(list1,list2,list3))

"""131. Write a Python program to count the frequency of consecutive duplicate elements in a given list of numbers.
Original lists:
[1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5]

Consecutive duplicate elements and their frequency:

([1, 2, 4, 5], [1, 3, 3, 4])
"""

from itertools import groupby


num=[1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5]
numbers=[key for key,_ in groupby(num)]
counts_numbers=[len(list(a)) for _,a in groupby(num)]
print((numbers,counts_numbers))

num=[1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5]
num1=list(set(num))

num2=[]

for x in num1:
  bs=num.count(x)
  num2.append(bs)
print((num1,num2))

a=[1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5]
c=(list(set(a)))
b=[]
for i in c:
  x =a.count(i)
  b.append(x)

print((c,b))

"""132. Write a Python program to find all index positions of the maximum and minimum values in a given list of numbers.

Original list:
[12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54]

Index positions of the maximum value of the said list:

7
Index positions of the minimum value of the said list:

3, 11
"""

a=[12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54]
print("position or index for the maximum  value",a.index(max(a)))

print("position or index for the minimum value",a.index(min(a)))
max_value=max([x for x in a])
min_value=min([x for x in a])

print(min_value,max_value)

"""33. Write a Python program to check if two lists have the same elements in them in same order or not.
Original lists:


['red', 'green', 'black', 'orange']
['red', 'pink', 'green', 'white', 'black']
['white', 'orange', 'pink', 'black']

Test common elements between color1 and color2 are in same order?
True

Test common elements between color1 and color3 are in same order?

False
Test common elements between color2 and color3 are in same order?

False
"""

color1=['red', 'green', 'black', 'orange']
color2=['red', 'pink', 'green', 'white', 'black']
color3=['red', 'pink', 'green', 'white', 'black']
def different_color(color1,color2):
  for x in color1:
    for x in color2:
      if x==y:
        return True
      else:
        return False

print(different_color(color1,color2))

def different_color(l1,l2):
  return l1==l2

color1=['red', 'green', 'black', 'orange']
color2=['red', 'pink', 'green', 'white', 'black']
color3=['red', 'pink', 'green', 'white', 'black']
new_ones=different_color(color1,color2)
print(f"Test common elements between color1 and color2 are in same order?{new_ones}")
new_two=different_color(color1,color3)
print(f"Test common elements between color1 and color2 are in same order?{new_two}")

def same_elements_in_same_order(list1, list2):
    # Check if the lists have the same elements in the same order
    return list1 == list2

# Original lists
color1 = ['red', 'green', 'black', 'orange']
color2 = ['red', 'pink', 'green', 'white', 'black']
color3 = ['white', 'orange', 'pink', 'black']

# Test common elements between color1 and color2
result1_2 = same_elements_in_same_order(color1, color2)
print(f"\nTest common elements between color1 and color2 are in same order?\n{result1_2}")

# Test common elements between color1 and color3
result1_3 = same_elements_in_same_order(color1, color3)
print(f"\nTest common elements between color1 and color3 are in same order?\n{result1_3}")

# Test common elements between color2 and color3
result2_3 = same_elements_in_same_order(color2, color3)
print(f"\nTest common elements between color2 and color3 are in same order?\n{result2_3}")

# Define a function 'same_order' that checks if common elements in two lists are in the same order
def same_order(l1, l2):
    # Find the common elements between 'l1' and 'l2' using set intersection
    common_elements = set(l1) & set(l2)

    # Filter 'l1' to keep only elements present in 'common_elements'
    l1 = [e for e in l1 if e in common_elements]

    # Filter 'l2' to keep only elements present in 'common_elements'
    l2 = [e for e in l2 if e in common_elements]

    # Check if the filtered 'l1' and 'l2' are equal, meaning the common elements are in the same order
    return l1 == l2

# Create three lists 'color1', 'color2', and 'color3' with string values
color1 = ["red", "green", "black", "orange"]
color2 = ["red", "pink", "green", "white", "black"]
color3 = ["white", "orange", "pink", "black"]

# Print a message indicating the original lists
print("Original lists:")
# Print the contents of 'color1', 'color2', and 'color3'
print(color1)
print(color2)
print(color3)

# Test if common elements between 'color1' and 'color2' are in the same order
print("\nTest common elements between color1 and color2 are in the same order?")
# Call the 'same_order' function with 'color1' and 'color2', then print the result
print(same_order(color1, color2))

# Test if common elements between 'color1' and 'color3' are in the same order
print("\nTest common elements between color1 and color3 are in the same order?")
# Call the 'same_order' function with 'color1' and 'color3', then print the result
print(same_order(color1, color3))

# Test if common elements between 'color2' and 'color3' are in the same order
print("\nTest common elements between color2 and color3 are in the same order?")
# Call the 'same_order' function with 'color2' and 'color3', then print the result
print(same_order(color2, color3))

# Define a function 'list_difference' that finds the difference between two lists (including duplicate elements)
def list_difference(l1, l2):
    # Create a copy of 'l1' to avoid modifying the original list
    result = list(l1)

    # Iterate through elements in 'l2'
    for el in l2:
        # Remove the first occurrence of 'el' from 'result'
        result.remove(el)
        print(result)

    # Return the modified 'result' list containing the difference
    return result

# Create two lists 'l1' and 'l2' with duplicate elements
l1 = [1, 1, 2, 3, 3, 4, 4, 5, 6, 7]
l2 = [1, 1, 2, 4, 5, 6]

# Print a message indicating the original lists
print("Original lists:")
# Print the contents of 'l1' and 'l2'
print(l1)
print(l2)

# Find the difference between 'l1' and 'l2' (including duplicate elements)
print("\nDifference between two said lists (including duplicate elements):")
# Call the 'list_difference' function with 'l1' and 'l2', then print the result
print(list_difference(l1, l2))

"""135. Write a Python program to iterate over all pairs of consecutive items in a given list.
Original lists:
[1, 1, 2, 3, 3, 4, 4, 5]

Iterate over all pairs of consecutive items of the said list:

[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]

"""

def pairs_values(number):
  pairing=[(number[x],number[x+1]) for x in range(len(number)-1)]
  return pairing
number=[1, 1, 2, 3, 3, 4, 4, 5]
print(pairs_values(number))

number=[1, 1, 2, 3, 3, 4, 4, 5]
mon=[]
for x in range(len(number)-1):
  c=tuple([number[x],number[x+1]])
  mon.append(c)
print(mon)

"""136. Write a Python program to remove duplicate words from a given list of strings.

Original String:

['Python', 'Exercises', 'Practice', 'Solution', 'Exercises']


After removing duplicate words from the said list of strings:
['Python', 'Exercises', 'Practice', 'Solution']
"""

values=['Python', 'Exercises', 'Practice', 'Solution', 'Exercises']
num1=[]
for x in values:
  if x not in num1:
    num1.append(x)
print(num1)

"""137. Write a Python program to find the first even and odd number in a given list of numbers.
Original list:
[1, 3, 5, 7, 4, 1, 6, 8]


First even and odd number of the said list of numbers:


(4, 1)
Click me to see the sample solution
"""

def first_even_odd(numbers):
    # Initialize variables to store the first even and odd numbers
    first_even = None
    first_odd = None

    # Iterate through the list of numbers
    for num in numbers:
        # Check if the current number is even and the first even number is not set
        if num % 2 == 0 and first_even is None:
            first_even = num
        # Check if the current number is odd and the first odd number is not set
        elif num % 2 != 0 and first_odd is None:
            first_odd = num

        # Break the loop if both the first even and odd numbers are found
        if first_even is not None and first_odd is not None:
            break

    # Return a tuple containing the first even and odd numbers
    return (first_even, first_odd)

# Example list of numbers
numbers_list = [1, 3, 5, 7, 4, 1, 6, 8]

# Print the original list
print("Original list:")
print(numbers_list)

# Call the function to find the first even and odd numbers
result = first_even_odd(numbers_list)

# Print the result
print("\nFirst even and odd number of the said list of numbers:")
print(result)

"""138. Write a Python program to sort a given mixed list of integers and strings. Numbers must be sorted before strings.
Original list:
[19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1]

Sort the said mixed list of integers and strings:
[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']


"""

new_york=[19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1]
new1=[]
new2=[]
for x in new_york:

  if isinstance(x,int):
    new1.append(x)
  elif isinstance(x,str):
    new2.append(x)
new_sorted=sorted(new1)
new_sorted1=sorted(new2)
print(new_sorted+new_sorted1)

"""139. Write a Python program to sort a given list of strings(numbers) numerically.
Original list:

['4', '12', '45', '7', '0', '100', '200', '-12', '-500']

Sort the said list of strings(numbers) numerically:

[-500, -12, 0, 4, 7, 12, 45, 100, 200]
Click me to see the sample solution
"""

numbers=['4', '12', '45', '7', '0', '100', '200', '-12', '-500']
num=[]
for x in numbers:
  if isinstance(x,str):
    y=int(x)
    num.append(y)
print(f"before sorting things",num)
sort_values=sorted(num)
print(f"sort value are list over here {sort_values}")

def remove_number(numbesr,n):
  for x in numbers:
     del x[n]
  return numbers
numbers=[['Red', 'Maroon', 'Yellow', 'Olive'], ['#FF0000', '#800000', '#FFFF00', '#808000'], ['rgb(255,0,0)', 'rgb(128,0,0)', 'rgb(255,255,0)', 'rgb(128,128,0)']]
n=0
print(remove_number(numbers,n))
n=1
print(remove_number(numbers,n))

"""141. Write a Python program to remove empty lists from a given list of lists.
Original list:
[[], [], [], 'Red', 'Green', [1, 2], 'Blue', [], []]


After deleting the empty lists from the said lists of lists


['Red', 'Green', [1, 2], 'Blue']
"""

number=[[], [], [], 'Red', 'Green', [1, 2], 'Blue', [], []]
new=[]

for x in number

  if x:

    new.append(x)
print(new)

number=[[], [], [], 'Red', 'Green', [1, 2], 'Blue', [], []]

number2=[x for x in number if x]
print(number2)

"""[[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]

Sum: 1st column of the said list of lists:

12
Sum: 2nd column of the said list of lists:

15
Sum: 4th column of the said list of lists:

9
"""

def columns(number10,n):
  result=sum([x[n] for x in number10])
  return result
number10=[[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]
n=0
print(columns(number10,n))
n=1
print(columns(number10,n))
n=2
print(columns(number10,n))

number10=[[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]
n=int(input("entert the columns"))
print(sum(number[n]))

"""Write a Python program to get the frequency of elements in a given list of lists.

[[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]
\
Frequency of the elements in the said list of lists:

{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
"""

def list_of_the(elements):
  new={}
  for element in elements:
    for new_list in element:
      new[new_list]=new_list.get(new_list,0)+1
  return new
number=[[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]
print(list_of_the(number))



number=[[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]

def element_frequency(list_of_lists):
    # Initialize an empty dictionary to store the frequency of elements
    frequency_dict = {}

    # Iterate through each list in the list of lists
    for sublist in list_of_lists:
        # Iterate through each element in the sublist
        for element in sublist:
            # Update the frequency in the dictionary
            frequency_dict[element] = frequency_dict.get(element, 0) + 1

    # Return the final frequency dictionary
    return frequency_dict

# Example list of lists
list_of_lists = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]

# Print the original list of lists
print("Original list of lists:")
for sublist in list_of_lists:
    print(sublist)

# Call the function to find the frequency of elements
result = element_frequency(list_of_lists)

# Print the result
print("\nFrequency of the elements in the said list of lists:")
print(result)