# -*- coding: utf-8 -*-
"""Untitled69.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_q-V_Ix7qSrG7GcU6I7F6_WzSjgljezX
"""

import pandas as pd
import numpy as np
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go

timesdata=pd.read_csv("/content/timesData.csv")
timesdata[:2]

timesdata1=timesdata[timesdata['year']==2016].iloc[:15,:]
timesdata1

fig=px.scatter(timesdata1,x=timesdata1.teaching,y=timesdata1.num_students,text=timesdata1.num_students,color='year',width=1000,height=1000)
fig.update_traces(textposition='middle left')
#fig.update_xaxes(title_text="teaching year in 2016") #xaxes code in the layout inside also working fine
#fig.update_yaxes(title_text="number of students  in 2016") #yaxes code write in the layout inside als working
fig.update_layout(title_text="teaching year in 2016 vs number of students",title_x=0.5,
               xaxis=dict(title="teaching year in 2016",showgrid=True,showline=True),
               yaxis=dict(title="number students  year in 2016",showgrid=True,showline=True))

diwali=pd.read_csv("/content/Diwali Sales Data (1).csv",encoding='latin-1')

diwali[:2]

diwali1=diwali[diwali['Amount']>10000].iloc[:15,:]
diwali1

"""scatter from the diwali table we will few parmeter x,y ,text,color,symbol,xaxis,yaxis,height,width,textpositions
hence the scatter function found marginal_x='hist' ,marginal_y='rug'
"""

fig=px.scatter(diwali1,x=diwali1.Orders,y=diwali1.Amount,text=diwali1.State,color='State',width=1000,height=1000,marginal_x='histogram',marginal_y='rug')
#fig.update_traces(textposition='middle right')
#fig.update_xaxes(title_text="teaching year in 2016") #xaxes code in the layout inside also working fine
#fig.update_yaxes(title_text="number of students  in 2016") #yaxes code write in the layout inside als working
fig.update_layout(title_text="ORDER OF THE YEAR VS AMOUNT I NDIA",title_x=0.5,
               xaxis=dict(title="orders",showgrid=True,showline=True),
               yaxis=dict(title="Amount",showgrid=True,showline=True),
                  template='plotly_dark')

"""Marginal Distribution Plots"""

import plotly.express as px
iris = px.data.iris()
fig = px.scatter(iris ,x="sepal_length", y="sepal_width",color='species',hover_data=['sepal_width','petal_length'] ,marginal_x="histogram", marginal_y="rug")
fig.show()

fig=px.scatter(iris,x=iris.sepal_length,y=iris.petal_length,facet_col='species',color='species')
fig

"""scatter from exploy express facet_col.facet_row"""

import plotly.express as px
import plotly.express as px
df1 = px.data.tips()
fig = px.scatter(df1, x="total_bill", y="tip", color="smoker", facet_col="sex", facet_row="time")
fig.show()

df1.head(5)

fig=px.scatter(df1,x=df1.total_bill,y=df1.tip,facet_col=df1.smoker,facet_row=df1.time,template='plotly_dark',color='sex',hover_data=['size','day'])
fig.update_layout(title="total bill vs tip",title_x=0.5)



px.scatter(df1,x=df1.total_bill,y=df1.tip,facet_col='time',facet_row='day',hover_data=['smoker','time'],template='plotly_dark')

df.head(2)

"""bar in plot express  defaulty from the stacked one by above"""

diwali1=diwali[diwali['Amount']>10000].iloc[:20,:]
diwali1

fig=px.bar(diwali1,x=diwali1.State,y=diwali1.Amount,text=diwali1.State,width=1000,color='State',height=600,barmode='group')
#fig.update_traces(textposition='outside')
#fig.update_xaxes(title_text="teaching year in 2016") #xaxes code in the layout inside also working fine
#fig.update_yaxes(title_text="number of students  in 2016") #yaxes code write in the layout inside als working
fig.update_layout(title_text="states VS AMOUNT IN NDIA",title_x=0.5,
               xaxis=dict(title="states",showgrid=True,showline=True),
               yaxis=dict(title="Amount",showgrid=True,showline=True),
                  template='plotly_dark')

"""bar in plolty express in the forn the barmode is group that will give us side by side"""

fig=px.bar(diwali1,x=diwali1.State,y=diwali1.Amount,text=diwali1.State,color='Occupation',hover_data=['Age Group','Gender'],width=1000,height=600,template='plotly_dark')
fig.update_traces(textposition='outside')
#fig.update_xaxes(title_text="teaching year in 2016") #xaxes code in the layout inside also working fine
#fig.update_yaxes(title_text="number of students  in 2016") #yaxes code write in the layout inside als working
fig.update_layout(title_text="states VS AMOUNT IN NDIA",title_x=0.5,
               xaxis=dict(title="states",showgrid=True,showline=True),
               yaxis=dict(title="Amount",showgrid=True),)

diwali

px.bar(diwali1,x=diwali1.Gender,y=diwali1.Amount,color='State',text=diwali1.Amount)

import plotly.express as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill", y="tip", color="smoker", facet_col="sex", facet_row="time")
fig.show()



import plotly.express as px
import plotly.express as px
tips = px.data.tips()
fig = px.scatter(tips, x="total_bill", y="tip", color="smoker", facet_col="sex", facet_row="time")
fig.show()

tips1=tips[tips['size']>=1].iloc[:100,:]
tips1

"""bar allows few parameter like x,y,facet_col,facet_row,text,hover_data"""

fig=px.bar(tips1,y=tips1.total_bill,x=tips1.smoker,color='day',barmode='group',facet_col='time',text=tips1.total_bill)
fig.update_layout(title="total bill vs somker")

timesdata2=timesdata[timesdata['teaching']>=85].iloc[:10,:]
timesdata2

fig=px.bar(timesdata2,x=timesdata2.country,y=timesdata2.international,barmode='group',facet_col='country',text=timesdata2.international)
fig.update_layout(title="total bill vs somker",title_x=0.5)

diwali1

fig=px.bar(diwali1,x=diwali1.Gender,y=diwali1.Orders,barmode='group',facet_col='Orders',facet_row='Zone',color='Gender')
fig.update_layout(title="gender vs order",title_x=0.5)

hotel=pd.read_csv("/content/hotel_bookings 2.csv")
hotel.head(10)

resort=hotel[hotel['hotel']=='Resort Hotel']
resort.head(2)

resort1=resort[resort['adr']>50].iloc[:100,:]

resort1.head(50)

px.bar(resort1,x=resort1.customer_type,y=resort1.adr,facet_col='reservation_status',facet_row="adults",color='adults')

timesdata2=timesdata[timesdata['teaching']>=20].iloc[:40,:]
timesdata2.head(10)

px.bar(diwali1,x=diwali1.State,y=diwali1.Amount,facet_col='State',facet_row='Gender',color='State',
       hover_data=['Age','Marital_Status','Zone'],height=1000,width=1000)

iris

iris2=iris[iris['sepal_length']>=1]
iris2.iloc[:40,:]

tips1=tips[tips['size']>=1].iloc[:50,:]
tips1
fig=px.line(tips1,x=tips1.total_bill,y=tips1.tip,color='sex',text=tips1.tip,markers=True,facet_col='day',height=1000)
fig.update_traces(marker_size=20,textposition='middle right')
fig.update_layout(title="tips vs total bill",title_x=0.5,
                  xaxis=dict(title="total_bill",showline=True,showgrid=True),
                  yaxis=dict(title="total_bill",showline=True,showgrid=True))

tips1=tips[tips['size']>=1].iloc[:10,:]
tips1
fig=px.line(tips1,x=tips1.total_bill,y=tips1.tip,color='sex',text=tips1.tip,markers=True)
fig.update_traces(marker_size=10,textposition='middle right')
fig.update_layout(title="tips vs total bill",title_x=0.5,
                  xaxis=dict(title="total_bill",showline=True,showgrid=True),
                  yaxis=dict(title="total_bill",showline=True,showgrid=True))

"""hist allows few parameters like color,facet_col,facet_row,width,height"""

fig=px.histogram(tips,x=tips['size'],text_auto='size',color='day',facet_col='day',facet_row='sex',width=1000,
             height=1000,template="plotly_dark")
fig.update_layout(title="size vs count",title_x=0.5,
                  xaxis=dict(title="size",showline=True,showgrid=True),
                  yaxis=dict(title="count",showline=True,showgrid=True))

timesdata2=timesdata[timesdata['teaching']>0].iloc[:20,:]


px.histogram(timesdata2,x=timesdata2.income,facet_col="country",text_auto='income',facet_row='year',
             width=1000,height=1000)

import matplotlib.pyplot as plt

plt.figure(figsize=(30,10))
sns.countplot(timesdata[:20],x='university_name')

"""px.strip(tips,x=tips."""

fig=px.strip(tips,x=tips.total_bill,y=tips.tip,facet_col='day',facet_row='time',color='smoker',hover_data=['size'])
fig.update_layout(title="total bill vs  tip",title_x=0.5,
                  xaxis=dict(title="bill",showline=True,showgrid=True),
                  yaxis=dict(title="tip",showline=True,showgrid=True))

fig=px.box(tips,y=tips.total_bill,facet_col='day',facet_row='sex',points='all')
fig.update_layout(title="total bill",title_x=0.5,
                  xaxis=dict(title="box plot",showline=True,showgrid=True))

timesdata2=timesdata[timesdata['teaching']>0].iloc[:10,:]


px.box(timesdata2,x=timesdata2.income,facet_col="country",
             width=1000,height=1000)

diwali3=resort[resort['adr']>0].iloc[:100,:]
diwali3

px.box(diwali3,y=diwali3.adr,facet_col="customer_type",facet_row='is_canceled',color='is_canceled',hover_data=['deposit_type','adults'],
             width=1000,height=600)

"""subrust,pie chart in plolty express"""

#diwali3=resort[resort['adr']>0].iloc[:1,:]
#diwali3
resort3=resort.groupby('arrival_date_month')['adr'].mean().reset_index()
#x.pie(diwali3,names='reservation_status',values='adr',hole=0.5)
resort3

fig=px.pie(resort3,names=resort3.arrival_date_month,values=resort3.adr,hole=0.5)
fig.show()



resort4=resort.groupby('arrival_date_month')['adr'].count().reset_index()
resort4

fig=px.pie(resort4,names=resort3.arrival_date_month,values=resort3.adr,hole=0.5)
fig.show()

resort5=resort.groupby(['arrival_date_month','customer_type'])['adr'].mean().reset_index()
resort5

import plotly.express as px
import plotly.graph_objects as go

px.sunburst(resort5,path=['arrival_date_month','customer_type'],values='adr')

import plotly.graph_objects as go
import pandas as pd

# Assuming 'resort4' is your DataFrame with the data
# Replace 'arrival_date_month' and 'adr' with the actual column names
labels = resort4['arrival_date_month']
values = resort4['adr']

t1 = go.Pie(labels=labels, values=values, name='n1')
data = [t1]

layout = go.Layout(title="Pie Chart Example")
fig = go.Figure(data=data, layout=layout)

fig.show()

import plotly.express as px
import plotly.graph_objects as go

labels=resort4['arrival_date_month']
values=resort4['adr']

t1=go.Pie(labels=labels, values=values,name='n1',hole=0.5,pull=[0,0,0,0,0.1,0,0,0,0,0.3,0,0.1])
data=[t1]
layout=go.Layout(title="pie",title_x=0.5)
fig=go.Figure(data=data,layout=layout)
fig.show()

"""scatter plot"""

tips1

plt.figure(figsize=(30,20))
sns.relplot(data=tips,x=tips.total_bill,y=tips.tip,col='day',row='smoker',style='sex',hue='day',sizes=(0,200),palette='deep',height=7)

plt.figure(figsize=(30,20))
sns.relplot(data=tips,x=tips.total_bill,y=tips.tip,col='day',row='smoker',style='sex',hue='day',sizes=(0,200),palette='deep',height=7)

sns.relplot(data=tips,x=tips.total_bill,y=tips.tip,col='day',sizes=(0,100))

"""relpot in scatter"""

sns.relplot(data=tips,x=tips.total_bill,y=tips.tip,col='day',sizes=(0,100),kind='scatter')

"""scatter plot in seabron from the relplot"""

sns.scatterplot(data=tips,x=tips.total_bill,y=tips.tip,hue='day',size='size',style='sex',palette='deep',hue_norm=(0,10),


                hue_order=['Sat','Sun','Fri','Thur'])

import seaborn as sns
import matplotlib.pyplot as plt

# Load example data
tips = sns.load_dataset("tips")

# Scatter plot with hue_order
sns.scatterplot(data=tips, x="total_bill", y="tip", hue="day", size="size", style="sex", palette="deep",
                hue_order=['Sat', 'Sun', 'Fri', 'Thur'], sizes=(10, 200), hue_norm=(0, 10),legend='full')

# Show the plot
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Load example data
tips = sns.load_dataset("tips")

# Scatter plot with legend='auto'
sns.scatterplot(data=tips, x="total_bill", y="tip", hue="day", size="size", style="sex", palette="deep",
                sizes=(10, 200), hue_norm=(0, 10), legend='auto')

# Show the plot
plt.title("Legend='auto'")
plt.show()

# Scatter plot with legend='brief'
sns.scatterplot(data=tips, x="total_bill", y="tip", hue="day", size="size", style="sex", palette="deep",
                sizes=(10, 200), hue_norm=(0, 10), legend='brief')

# Show the plot
plt.title("Legend='brief'")
plt.show()

# Scatter plot with legend='full'
sns.scatterplot(data=tips, x="total_bill", y="tip", hue="day", size="size", style="sex", palette="deep",
                sizes=(10, 200), hue_norm=(0, 10), legend='full')

# Show the plot
plt.title("Legend='full'")
plt.show()

# Scatter plot with legend=False
sns.scatterplot(data=tips, x="total_bill", y="tip", hue="day", size="size", style="sex", palette="deep",
                sizes=(10, 200), hue_norm=(0, 10), legend=False)

# Show the plot
plt.title("Legend=False")
plt.show()

"""line plot  in relpot from the seaborn
here legend plotted based on hue_order


---


"""

sns.set_style("whitegrid")
sns.lineplot(data=tips,x=tips.total_bill,y=tips.tip,hue='day',sizes=(10,100),style='sex',hue_order=['Thur','Sun','Fri','Fri'],palette='deep')

"""relpot have the two plots 1.scatter ,2.line plot"""

tips

sns.displot(data=tips,x='size',multiple='stack',hue='day')

sns.displot(data=tips,x='size',hue='day',col='day',row='sex')

sns.displot(data=tips,x='size',hue='day',col='day',row='sex',kde=True)

sns.displot(data=tips,x='tip',y='total_bill')

"""two variables for the kde in displot"""

sns.displot(data=tips,x='tip',y='total_bill',kind='kde')

sns.displot(data=tips,x='tip',y='total_bill',kind='kde',hue='day',col='day',row='smoker')

sns.displot(data=tips,x='tip',y='total_bill',kind='kde',rug=True)

sns.displot(data=tips,x='tip',y='total_bill',kind='kde',hue='day',rug=True,col='day',row='sex')

"""kde plot"""

sns.displot(data=tips,x='tip',kind='kde',hue='day',col='day',row='smoker')

"""displot have the histpolt,kdeplot,ecedf"""



"""histplot in col,row is not working"""

sns.histplot(data=tips,x='size',multiple='stack',hue='day',bins=2,)

import seaborn as sns
import matplotlib.pyplot as plt

# Load example data
tips = sns.load_dataset("tips")

# Create a basic histogram of the 'total_bill' column
sns.histplot(data=tips, x='total_bill', bins=30, kde=False, color='skyblue')

# Show the plot
plt.title('Basic Histogram')
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Load example data
tips = sns.load_dataset("tips")

# Create a histogram of 'total_bill' with 'day' as hue, cumulative=True
sns.histplot(data=tips, x='total_bill', hue='day', kde=True, multiple='stack')

# Show the plot
plt.title('Histogram with Hue and Cumulative')
plt.show()

sns.kdeplot(data=tips,x='total_bill',hue='day',fill=True,hue_order=['Thur','Fri','Sat','Sun'],common_grid=True,cumulative=True)

sns.kdeplot(data=tips,x='total_bill',hue='day',fill=True)

"""sometimes kde plot use the two variables we will discuss"""

sns.kdeplot(data=tips,x='total_bill',y='tip',fill=True,hue='day')

"""Explanation:

An ECDF plot shows the empirical cumulative distribution function for a set of data.
The x-axis represents the data values, sorted in ascending order.
The y-axis represents the cumulative probability of observing a value less than or equal to x.
"""

sns.ecdfplot(data=tips,x='total_bill',hue='day',hue_order=['Thur','Fri','Sat','Sun'],legend=True)

"""categorical plots  six types
1.stripplot
2.swarmplot
3.bar plot
4.countplot
5.box plot
6.violin point


kindstr
The kind of plot to draw, corresponds to the name of a categorical axes-level plotting function. Options are: “strip”, “swarm”, “box”, “violin”, “boxen”, “point”, “bar”, or “count”.
"""

sns.catplot(data=tips,x="total_bill",y="day" ,hue='smoker',col='day',row='sex',jitter=True)

sns.catplot(data=tips,x="total_bill",y="day" ,hue='smoker',col='day',row='sex',jitter=True,kind='strip')

sns.catplot(data=tips,x="total_bill",y="day" ,hue='smoker',col='day',row='sex',kind='swarm')
plt.xlabel("day")
plt.ylabel("total_bill")

sns.catplot(data=tips,x="day",y="total_bill" ,kind='bar',estimator='mean')
plt.xlabel("day")
plt.ylabel("total_bill")

tips.groupby("day")['total_bill'].mean()

plt.figure(figsize=(15,10))
ax=sns.catplot(data=tips,x="day",hue="smoker",kind="count")

plt.xlabel("day")
plt.ylabel("total_bill")

plt.figure(figsize=(17,10))
ax=sns.countplot(data=tips,x='day',hue='smoker')
for bars in ax.containers:
  ax.bar_label(bars)

sns.catplot(data=tips,x="total_bill",y="day" ,hue='smoker',col='day',row='sex',kind='box')
plt.xlabel("day")
plt.ylabel("total_bill")

sns.catplot(data=tips,x="total_bill",y="day" ,hue='smoker',col='day',row='sex',kind='violin')
plt.xlabel("day")
plt.ylabel("total_bill")
plt.title(" day vs total_bill")
plt.show()

sns.catplot(data=tips,x="total_bill",y="day" ,hue='smoker',col='day',row='sex',kind='boxen')
plt.xlabel("day")
plt.ylabel("total_bill")
plt.title(" day vs total_bill")
plt.show()

"""strip plot

Introduction: A strip plot is a scatter plot where one of the variables is categorical. It displays individual data points along a single axis.
"""



sns.stripplot(data=tips,x="total_bill",y="day",jitter=True)
plt.xlabel("day")
plt.ylabel("total_bill")
plt.title(" day vs total_bill")
plt.show()

"""hue,dodge parameter strip will cover few things x,y ,dodge,hue,jitter,

dodge individuals split each other for example sex have the two one for the female and another for the male

Use Case: Suitable for visualizing the distribution of a continuous variable across different categories.
"""

sns.stripplot(data=tips,x="total_bill",y="day",jitter=True,hue='sex',dodge=True)
plt.xlabel("day")
plt.ylabel("total_bill")
plt.title(" day vs total_bill")
plt.show()

"""important one****"""

sns.stripplot(data=tips.query("size in[2,3]"),x='total_bill',y='day',hue='sex',dodge=True,jitter=True,edgecolor='gray')

"""swarm plot

: Similar to a strip plot, but points are adjusted to avoid overlap, providing a clearer representation of the distribution.
 few parameter allows be jitter ,edgecolor,dodge,hue,x,y

Spread:


Spread typically refers to the extent or variability of a dataset. It provides information about how the values in a dataset are dispersed or how much they deviate from the central tendency. Common measures of spread include:

Range: The difference between the maximum and minimum values in a dataset.
Interquartile Range (IQR): The range between the first quartile (25th percentile) and the third quartile (75th percentile). It provides a measure of the spread of the middle 50% of the data.
Variance: The average of the squared differences from the mean. It quantifies the overall variability.
Standard Deviation: The square root of the variance. It provides a measure of the average deviation from the mean.

Distribution:


Distribution refers to the way values are spread or arranged in a dataset. It describes the frequency or probability of different values occurring. Common types of distributions include:

Normal Distribution: A symmetric, bell-shaped distribution characterized by a mean and standard deviation.
Skewed Distribution: When the data is not symmetric and is stretched in one direction.
Uniform Distribution: All values in the dataset have equal probability.
Bimodal Distribution: When a dataset has two distinct peaks.
"""

sns.swarmplot(data=tips,x="total_bill",y="day")
plt.xlabel("day")
plt.ylabel("total_bill")
plt.title(" day vs total_bill")
plt.show()

sns.swarmplot(data=tips,x="total_bill",y="day",hue='smoker',legend=True,dodge=True,edgecolor='gray')
plt.xlabel("day")
plt.ylabel("total_bill")
plt.title(" day vs total_bill")
plt.show()

sns.swarmplot(data=tips,x="total_bill",y="day",hue='smoker',legend=True,dodge=True,edgecolor='gray')
plt.xlabel("day")
plt.ylabel("total_bill")
plt.title(" day vs total_bill")
plt.show()

sns.swarmplot(data=tips,x="total_bill",y="day",hue='smoker',legend=True,dodge=True,edgecolor='gray')
plt.xlabel("day")
plt.ylabel("total_bill")
plt.title(" day vs total_bill")
plt.show()

sns.swarmplot(data=tips,x="total_bill",y="day",hue='sex',dodge=True,legend=False,edgecolor='yellow')
plt.xlabel("day")
plt.ylabel("total_bill")
plt.title(" day vs total_bill")
plt.show()

sns.swarmplot(data=tips.query("size in [1,4,6,2]"),x='total_bill',y='day',hue='sex',dodge=True,legend=True)
plt.xlabel("day")
plt.ylabel("total_bill")
plt.title(" day vs total_bill")
plt.show()

"""3. Box Plot (Box-and-Whisker Plot):
Introduction: Displays the distribution of quantitative data across different levels of a categorical variable.

Use Case: Useful for identifying the central tendency and spread of the data within different categories.

box plot allow few parameters like x,y,hue,order,hue_rder,dodge,
"""

sns.boxplot(data=tips,x='day',y='total_bill')
plt.xlabel("day")
plt.ylabel("total_bill")
plt.title(" day vs total_bill")
plt.show()

sns.boxplot(data=tips,x='day',y='total_bill',hue='day',dodge='sex', order=['Fri','Sat','Sun','Thur'],hue_order=['Sun','Sat','Fri','Thur'],
            linewidth = 3 ,# Lines width
            saturation = 0.95)
plt.xlabel("day")
plt.ylabel("total_bill")
plt.title(" day vs total_bill")
plt.show()

tips

import seaborn as sns
import matplotlib.pyplot as plt

# Load example data
tips = sns.load_dataset("tips")

# Create a boxplot with various parameters
sns.boxplot(
    data=tips,
    x="day",
    y="total_bill",
    hue="sex",
    order=["Thur", "Fri", "Sat", "Sun"],
    hue_order=["Male", "Female"],
    orient="v",
    color="skyblue",
    palette="Set2",
    saturation=0.8,

    dodge=True,
    width=0.7,

    whis=1.5,
    linecolor='black',
    linewidth=1.5,
    fliersize=8,
    hue_norm=None,
    native_scale=True,
    log_scale=None,
    formatter=None,
    legend='auto',
    ax=None
)

# Set labels and title
plt.xlabel("Day")
plt.ylabel("Total Bill")
plt.title("Boxplot of Total Bill Across Days by Sex")

# Show the legend
plt.legend(title="Sex")

# Show the plot
plt.show()

"""boxen plot allows few parameters like x,y,hue,dodge,palette,order,showlfliers"""

sns.boxenplot(tips,x="total_bill",y="day",hue='sex',dodge=True,palette='deep',width=.5,order=['Thur','Fri','Sat','Sun'],

              showfliers=True)

tips.groupby('day')['total_bill'].max()

"""4. Violin Plot:
Introduction: Combines aspects of a box plot and a kernel density plot. It provides information about the distribution's shape and spread.
Example:

use case:Use Case: Helpful when you want to visualize both the summary statistics and the distribution of the data.

inner{“box”, “quart”, “point”, “stick”, None}
Representation of the data in the violin interior. One of the following:

"box": draw a miniature box-and-whisker plot

"quart": show the quartiles of the data

"point" or "stick": show each observation
and allow to be x,y ,dodge,legend,order,width,bw_adjust,
"""

sns.violinplot(data=tips,y='total_bill',x='day',hue='sex',order=['Fri','Sat','Sun','Thur'],fill=False,legend=True,dogde=True,width=.7,bw_adjust=.10)



sns.violinplot(data=tips,y='total_bill',x='day',hue='sex',order=['Fri','Sat','Sun','Thur'],fill=False,
               legend=True,dogde=True,width=.7,bw_adjust=.10,split=True,inner='quart')

#it gives quartiles

sns.violinplot(data=tips,x='total_bill',y='day',split=True,inner='quart')

#The inner="stick" parameter is used to show individual data points inside the violins.
#Each vertical stick represents the location of a single data point along the y-axis within each category (day and sex).
#this look like 'stick format
sns.violinplot(data=tips, x="day", y="total_bill", hue="sex", inner="stick")

#inner=point show the of the each obeservation of individual data points inside the violins
#this look like points
sns.violinplot(data=tips, x="day", y="total_bill",inner="point")

sns.violinplot(data=tips, x="day", y="total_bill",split=True,inner="box")

"""
bar plot
Introduction: Displays the mean (or another estimator) of a numeric variable for each category.
Example:


Use Case: Useful for comparing the central tendency of a numeric variable across different categories.

barplot allowas x,y ,hue,dodge,legend ,width ,edgecolor"""

diwali

diwali3=timesdata[:100].pivot_table(index='year',columns='university_name',values='teaching',aggfunc='mean').fillna(1)

diwali3

tips5=tips.pivot_table(index='day',columns='time',values='total_bill',aggfunc='mean').fillna(1)

tips5

sns.barplot(tips5)

18+19+20+21 #we are actually getting 4 rows all the rows added /n  78/4 in diner=19.5

31/4 #we are actually getting 4 rows all the rows added /n  31/4 in lunch=19.5

sns.barplot(data=tips,x='time',y='total_bill',estimator='mean',)

ax=sns.barplot(data=tips,x='time',y='total_bill',estimator='mean',hue='day')
for bars in ax.containers:
  ax.bar_label(bars)
plt.legend(loc='right')

ax=sns.barplot(data=tips,x='time',y='total_bill',estimator='mean',hue='day',errorbar=None)
for bars in ax.containers:
  ax.bar_label(bars)
plt.legend(loc='right')

"""Preserve the original scaling of the grouping variable and add annotations in numeric coordinates:"""

ax=sns.barplot(data=tips,x='time',y='total_bill',estimator='mean',hue='day',errorbar=None)
for bars in ax.containers:
  ax.bar_label(bars)

plt.legend(loc='right')

ax=sns.barplot(data=tips,x='day',y='total_bill',estimator='min',hue='sex',errorbar=None)
for bars in ax.containers:
  ax.bar_label(bars)

plt.legend(loc='right')

ax=sns.barplot(data=tips,x='time',y='total_bill',estimator='max',hue='day',errorbar=None,edgecolor='red',fill=True,dodge=True,palette='deep',)
for bars in ax.containers:
  ax.bar_label(bars)

plt.legend(loc='right')

"""countplot"""

ax=sns.countplot(tips,x='day',hue='sex',edgecolor='yellow',linestyle='dotted',orient='v',dodge=True)
for bars in ax.containers:
  ax.bar_label(bars)
plt.xlabel("diferent types of days")
plt.ylabel("count")

def list(fname,lname):
  return fname.title(),lname.title()
a,b=list('jagan','venky')
print(f"your first is{a} and your second name is {b}")

def add(a,b):
  if a==0 & b==0:
    return "invalid statement over here"
  else:
    return "jagan"
a=int(input("enter the a value "))
b=int(input("enter teh b value"))
print(add(a,b))

