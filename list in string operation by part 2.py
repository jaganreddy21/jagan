# -*- coding: utf-8 -*-
"""Copy of Welcome To Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QLkwfCa--3wzbmqOse_33r__NbtI35Kn
"""

seconds_in_a_day = 24 * 60 * 60
seconds_in_a_day

dir('list')

list=[2,5,6,78,'hello','hello123',22.5,67.9]
count3=[]
count1=[]
count2=[]
for x in list:
  if isinstance(x ,str):
   count3.append(x)
  elif isinstance(x,int):
   count1.append(x)
  elif isinstance(x,float):
    count2.append(x)
print(f" adding the float number,{count2}")
print(f" adding the int number,{count1}")
print(f" adding the string number ,{count3}")

"""find in list"""

if "hello123" in list:
  print(f" found the list value {list}")
else:
  print(f" not the list value {list}")

if "123" in list:
  print(f" found the list value {list}")
else:
  print(f" not the list value {list}")



"""find:


if it start from the left to right then when you value that will gave
the index
"""

list1='jagan mohan something'
print(list1.find('a'))

"""if element is found not list1 it will gaves the none"""

print(list1.find('nothing'))

"""format"""

age=22
value=222
print("here the people {} and the people {}".format(age,value))

age=22
value=222
print("here the people {} and the people {}".format(value,age))

print(list)
if 'hello123' in list:
  print( f" element are found {list}")
else:
  print("f element not found over here {list}")

"""format_map',"""

namespace={'name':'jagan','age':22,"city":"yerragondapalem"}
print("we have the print all the {name} and every person have the different {age} and every guy belong to the {city}".format_map(namespace))

help("format_map")

# List of dictionaries representing books
books_info = [
    {'title': 'Python Crash Course', 'author': 'Eric Matthes', 'price': 29.99},
    {'title': 'Fluent Python', 'author': 'Luciano Ramalho', 'price': 39.95},
    {'title': 'Data Science for Beginners', 'author': 'John Doe', 'price': 19.99}
]

# Define a template string with placeholders
template = "Title: {title}, Author: {author}, Price: ${price}"

# Use format_map() with each dictionary in the list
formatted_books = [template.format_map(book) for book in books_info]

# Printing the formatted strings for each book
for formatted_string in formatted_books:
    print(formatted_string)

namespace=[{'name':'jagan','age':22,"city":"yerragondapalem"}]
template="Name:{name},age:{age},city:{city}"
string1=[template.format_map(word) for word in namespace]
for string2 in string1:
  print(string2)

"""index is the single letter of the string"""

print(list1)
print("we are using the index ",list1.index('m'))

"""index is the single word of the string"""

print(list1)
print("we are using the index that for the single word ",list1.index('jagan'))

"""if single word  there

```
# This is formatted as code
```


"""

print(list1)
print("we are using the index that for the single word ",list1.index('new'))

list

list.index(78)

list.index(78)

"""find in string when you have value present in string it return the value index otherwise the -1

index in string when you have value present in list return the index value otherwise the error
"""

print(list)
print(list.index(2))
print(list.index(67.9))
print(list1.find('n'))

list.index('')
print(len(list1))

list1.find('m')

dir('list')

list2=['jagan123','jagan',123,24,567,56]
for x in list2:
  if isinstance(x,str) and x.isalnum():
    print(f" here the str values are {x}")
  elif isinstance(x,int):
    print(f" here the int valuesa are {x}")

values = ['123', '456', 'abc', '789']

for value in values:
    if value.isdecimal():
        print(f"{value} consists only of decimal characters.")
    elif value.isascii():
        print(f"{value} consists only of ASCII characters.")
    else:
        print(f"{value} doesn't fit either criteria.")

values =['1234','123','0','12','a',' ','&',22,'22v1','22/3']
for values1 in values:
  if isinstance(values1,int):
    print("integer number",values1)
  elif values1.isdecimal():
    print(values1)
  elif values1.isascii():
    print("asci cahracters ",values1)
  elif values1.isnumeric():
    print("numeric values are ",values1)

values =['1234','123','0','12','a','','&',22,'22v1','22/3v']
for x in values:
  if x.isascii():
    values.remove(x)
print(values)

values = ['1234', '123', '0', '12', 'a', '', '&', 22, '22v1', '22/3v']

for value in values:
    print(f"The type of '{value}' is {type(value)}")

"""If you want to treat the numeric-looking strings as actual numbers, you

 might need to convert them explicitly. For example:

 here actual sytring values converted into the int

 '22v1' and '22/3v' if any letter is there in between the string
"""

for value in values:
    if isinstance(value, str) and value.isdigit():
        value = int(value)
        print(f"Now, the type of '{value}' is {type(value)}")
    else:
        print(f"The type of '{value}' is {type(value)}")

"""**********but not working **********  just understand purpose

isdigits() it allowas to be  superscript,superscript,base    

isnumeric() it allows to be superscript and subscript and roman

isdecimal () it allows to be number dont use the 22.00 like this
"""

'XVI'.isnumeric()

'123y'.isdigit()

'99'.isnumeric()

'123'.isdecimal()

"""sTRING METHOD IN LIST THAT REASON EVERY VALUE '' MAY BE SOME VALUE 22,5,7


isalpha if the string all the character like this 'jagan','sai'

isinstance(x,int) it gives the integer values

isalnum() meaninng is the combination of alpha and num values but one

 thing remembers ex :'jagan", "jagan123" if anyone of the alphabetic  

 letter or number it gives the true

 isalscii  is 0 t0 127   !m@,#,$,%,^<&<*<()=+ lie this
"""

list3=[22,4,5,'jagan','22','$','!','%',' ','jagan123','28','97','>','<','#','(','+']
for x in list3:
  if isinstance(x,int):
    print(f" int values are printe  {x}")
  elif x.isalpha():
    print(f" string values or alphabetic characters  over here {x}")
  elif x.isalnum():
    print(f"alnum is the combination num and alphabestic {x} and the tyoe of {type(x)}")
  elif x.isascii():
    print(f" ascii charcaters are the '{x}' and the {type(x)}")

list3=[22,4,5,'jagan','22','$','!','%',' ','jagan123','28','97','>','<','#','(','+']

for x1 in list3:
  if isinstance(x1,int):
    print(x1)

  elif x1.isascii():
    list3.remove(x1)

p=[x1 for x1 in list3 if isinstance(x1,int)]
print(p)

list3 = [22, 4, 5, 'jagan', '22', '$', '!', '%', ' ', 'jagan123', '28', '97', '>', '<', '#', '(', '+']
list4 = [x1 for x1 in list3 if isinstance(x1, str) and x1.isascii()]

print("Modified list4:", list4)

"""
If you want to remove ASCII strings from list3, you can use a list

comprehension with the condition to keep only non-ASCII elements
.
Here's the modified code:"""

[x for x in list3 if not (isinstance(x,str) and x.isascii())]



for values in list3:
  print(f" values of {values}  is {type(values)}")

list5=[]
for x  in list3:

  if isinstance(x,int) or not(isinstance(x,str)) and isinstance(x,str) and x.ascii():
    print(x)
    list5.append(x)
print(list5)

list5=[]
for x  in list3:
  if isinstance(x,str) and x.isascii():
    print(x)
    list5.append(x)
print(list5)

list3 = [22, 4, 5, 'jagan', '22', '$', '!', '%', ' ', 'jagan123', '28', '97', '>', '<', '#', '(', '+']
list4 = [x for x in list3]

print("Modified list3:", list4)

for x1 in list3:
  if not (isinstance(x1,str)) or(isinstance(x,(float,int))):
    print(x1)

list3 = [22, 4, 5, 'jagan', '22', '$', '!', '%', ' ', 'jagan123', '28', '97', '>', '<', '#', '(', '+']
list4 = []

for x1 in list3:
    if not (isinstance(x1, str) and x1.isascii()) or isinstance(x1, (int, float)):
        list4.append(x1)

print("Modified list3:", list4)

dir('list')



"""identifer is varibles rules like jagan_mohan,_jagan_mohan"""

list6=['jagan mohan','_jagan_mohan','sanjagy']
for x in list6:
  if x.isidentifier():
    print(f" identifer is found {x}")
  else:
    print(f" identifer is not found {x}")

identifier_1=[x for x in list6 if x.isidentifier()]
print(f" identifier values are {identifier_1}")
identifier_2=[x for x in list6 if not (x.isidentifier())]
print(f" it is not identifier is {identifier_2}")

list7=[22,5,7,8,'jagan','jagan2','3','#']
for x in list7:
  if isinstance(x,str) and x.isalpha():
    print(f"to print alpha characters {x}")
  elif isinstance(x,int):
    print(f" values are integers type like {x}")
  elif x.isalnum():
    print(f" to print the is the combination of the {x}")
  elif x.isascii():
    print(f" to print the ascill values {x}")
list8=[x for x in list7 if isinstance(x,str) and x.isascii()]
print(list8)

list7 = [22, 5, 7, 8, 'jagan', 'jagan2', '3', '#']

for x in list7:
    if isinstance(x, (str, int)) and str(x).isascii():
        print(f"To print the ASCII values: {x}")

"""isspace ,isupper,islower,istitle,issupper"""

list9=['jagan','mohan','UPPER','Jagan Mohan','Sai Teja','JAGAN']


for x in list9:
  if x.isupper():
    print(f"upper value of the list  {x}")

  elif x.islower():
    print(f"lower value of the list {x}")
  elif x.isspace():
    print(f"isspace is the required of the list {x}")
  elif x.istitle():
    print(f"title is the capital of the each word the starting letter of the list {x}")
  elif x.isupper():
    print(f"supper is the display upper case letter of the string {x}")

string3='jagan mohan'
print(string3.lower())
print(string3.upper())
print(string3.title())
print(string3.capitalize())
print(string3.isupper())

text = "HELLO mohan"
result = text.isupper()
print(result)  # Output: True
list10=['hello','BYE']
for x in list10:
  if x.isupper():
    print(f" supper it will be give word is the upper case {x}")

list11=['jagan\t mohan','reddy','mohan\n jagan','new year\t2023','new year\2056','something\\nephew','jagan2023']
for x in list11:
  if x.isprintable():
    print(f" it is printable function is {x}")
  else:
    print(f" it is not a prinatbel function {x}")

"""if there is no space  and escape sequences it will gives the true

if there is space and numeric values it gives false
"""

'jagan\\mohan'.isprintable()

'jagan\2022'.isprintable()

'2022'.isprintable()

"""if any space available is false"""

'jagannew year\t new'.isprintable()

""" join:

 iterable	Required. Any iterable object where all the returned values are strings
"""

list13=['jaagn','venkatesh','new year','luck year','123','jagann mohan reddy']

list14='-'.join(list13)
print(list14)

"""In Python, the strip() method is used to remove leading and trailing whitespace

characters (spaces, tabs, and newlines) from a string. It returns a new string

with the whitespace characters removed. The original string remains unchanged.

"""

jagan=['jagan ' ,'thontla',","]
[x for x in jagan if not(x.strip())]

list14=['   hello world\n','  jagan']
for x in list14:
  print("to print the strip string",x.strip())

"""lstrip,rstrip,strip"""

str = "---geeksforgeeks---"
print(str.strip('-'))
print(str.lstrip('-'))
print(str.rstrip('-'))
str1='   jagan mohan reddy '
print(str1.strip(" "))
print(f"to printed the rstrip{str1}")
print(f"to printed teh lstrip{str1}")

"""strip,lstrip,rstrip

#mostly suitable for the string is best
"""

string1=' jagan  '
string2='  \tjagan mohan reddy\t '
print(string1.strip())
print(string1.lstrip())
print(string1.rstrip())


print(string2.strip()) #here strip work of teh left and right for the spaces or whites or esacp sequences are eliminated
print(string2.lstrip()) #here left side space  and escape sequences or white spaces eliminates

print(string2.rstrip()) #here roght side space and escape sequences od white spaces eliminates

[x.lstrip() for x in list15]

"""The rjust() and ljust() methods in Python are string methods used to justify a

 string within a specified width by padding it with a specified character.


str.rjust(width, fillchar=' '):

width: The width of the resulting string, including the original string.

fillchar: The character used for padding (default is space ' ').

str.ljust(width, fillchar=' '):
width: The width of the resulting string, including the original string.


fillchar: The character used for padding (default is space ' ').
"""

# rjust() example
original_string = 'Hello'
rjust_result = original_string.rjust(10, '*')  # Right justify with '*' padding
print(f"Original string: '{original_string}'")
print(f"Right justified: '{rjust_result}'")

# ljust() example
original_string = 'World'
ljust_result = original_string.ljust(10, '*')  # Left justify with '*' padding
print(f"Original string: '{original_string}'")
print(f"Left justified: '{ljust_result}'")

"""rjust and ljust

rjust used for the fill values based upon the string
"""

list17=['jagan','apple','axes']
for x in list17:
  print(x)
  print(f" to printed the rjust,{x.rjust(10,'*')}")
  print(f"to printed the ljust,{x.ljust(10,'*')}")
  print(x)

"""fillchar use the only the single quotes
(20,'*') like this
"""

str='jaganmohan'
print(f" to printed the ljust  {str.ljust(20,'*')}")
print(f" to printed the rjust  {str.rjust(20,'*')}")

"""rsplit and rfind"""

'jagan'.rfind('n')




text = "Hello, world! Hello, Python!"
index = text.rfind("Hello")
print(f"The rightmost occurrence of 'Hello' is at index: {index}")
index1=text.rfind('H')
print(f"The rightmost occurrence of 'H' is at index: {index1}")
index2=text.rfind('w')
print(index2)

text = "Hello, Python!"
print(len(text))

"""rsplit function


we are using basically maxsplit is 3 once you remember right three split is max 'engineering', 'and', 'technology'

remaining thing is 'this is chalapathi institute of'
"""

sentence ='this is chalapathi institute of engineering and  technology'
print("to print the rsplit ",sentence.rsplit(maxsplit=3))
print("to printe the rsplit with maxsplit is 5",sentence.rsplit(maxsplit=5))

"""sometimes your string is string words is 8 but your try to gave the maxsplit is 10 and whatever string words  that only get it

ssentence is 8 words only but your gave the max split output get it that sentence only
"""

print("to printe the rsplit with maxsplit is 5",sentence.rsplit(maxsplit=10))

"""separtor with never printed just separator"""

sentence1=sentence.rsplit('of')
print(sentence1)

"""removeprefix in the givien string 'jagan mohan reddy'.removeprefix('jagan') is mohan redd otherwise jagan mohan reddy
removeprefix in the givein string 'computer science'.removesuffix('science') is computer otherwise is the computer science
"""



print('jagan mohan reddy'.removeprefix('jagan'))
print('jagan mohan reddy'.removeprefix('reddy'))
print('jagan mohan reddy'.removesuffix('jagan'))
print('jagan mohan reddy'.removesuffix('reddy'))

"""removesuffix and prefix is the best way work in string"""

list19=['jagan mohan','jagan']
for x in list19:
  print(f" remove the prefix is the {x.removeprefix('jagan')}")
  print(f" remoev the suffix is the {x.removesuffix('mohan')}")

'newly ones'.removesuffix('mohan')



original_list = ["apple", "banana", "orange", "kiwi", "grape"]
prefix_to_match = "ban"

filtered_list = [fruit for fruit in original_list if fruit.startswith(prefix_to_match)]

print("Original List:", original_list)
print("Filtered List with Prefix:", filtered_list)

string1 = "Welcome to python 3.9"
print("Original String 1 : ", string1)

# prefix exists
result = string1.removeprefix("Welcome")
print("New string : ", result)

string2 = "Welcome Geek"
print("Original String 2 : ", string2)

# prefix doesn't exist
result = string2.removeprefix("Geek")
print("New string : ", result)

s = 'GeeksforGeeks'

# prefix exists
print(s.removeprefix('Geeks'))
print(s.removeprefix('G'))


# whole string is a prefix
# it would print an empty string
print(s.removeprefix('GeeksforGeeks'))

# prefix doesn't exist
# whole string is returned
print(s.removeprefix('for'))
print(s.removeprefix('IT'))
print(s.removeprefix('forGeeks'))

s = 'GeeksforGeeks'
print(s.removesuffix('for'))
print(s.removesuffix('Geeks'))
print(s.removesuffix('it'))
print(s.removesuffix('forGeeks'))
print(s.removesuffix('Geeks'))

list20='this is jagan from the computer science'
print(list20.partition('jagan'))

list21='this is jagan from the computer science to learn many things'
print(list21.partition('the'))

print(list21.rpartition(""))

"""rparition si the right to left " " if any space

partition is the left to right " " if any space

if you want to specify partition character
"""

print(list21.rpartition(' '))
print(list21.partition(" "))
print(list21.partition(" to"))
list22='this is jagan  computer from the computer science to learn many things'

"""dict doesnt allow dupliactes values

partition list22 in the first occurence left to right

rpartition list22 in the first occurence left to right

specify string word before
specify match the word
specify string after word

partition can be divided into three parts above ones
"""

print(list22.partition('computer'))
print(list22.rpartition('computer'))

x={1,2,1}
print(len(x))
y=len(x)^2
print(y)
print(x)

dir('list')

list21

"""if the enter string is the small letter output will be represent is upper"""

print(list21.swapcase())

"""upper------------lower based upon string
lower---------upper
"""

list2='Jagan MohaN rEddY'
list3='new Year'
print(list2.swapcase())
print(list3.swapcase())

list22='jagan mohan'
print(list22.title())
print(list22.capitalize())

"""not good apporach go to string"""

list3=['jagan mohan','computer science','Simetime']
for x in list3:
  b=x.swapcase()
print(b)

list23='hi this is jagan from the computer science Background'
print(list23.swapcase())

"""In Python, the str.splitlines() method is used to split a multi-line string

into a list of lines. Each line is a separate string element in the resulting

 list. This method considers different line endings such as '\n', '\r', or

 '\r\n'.
"""

list23="jagan\n mohan reddy \n from the chalapathi\ninstitute enginnering\nand technology"
list24=list23.splitlines()
print("split lines are :")
for x in list24:
  print(x)

"""The zfill() method adds zeros (0) at the beginning of the string, until it

reaches the specified length.

If the value of the len parameter is less than the length of the string, no

filling is done.
"""

list25='50'
print(list25.zfill(10))
list26=['40','34','24','6','8','9']
for x in list26:
  print(f"to printed the zeroe using the zfill {x.zfill(10)}")

"""maketrans used for the unicode ascill caharcters o to 256

maketrans(x,y,z)
x->mandatory,y,z-->optional

tarnslate(x)-: one variable  output for the ? like this
"""

string='this is chaitanya college'
string1={"a":1,"b":2,"c":3,"d":4,"e":5}

double=string.maketrans(string1)
string20=string.translate(double)
print(string20)
print(double)
chr(97)

"""x and y values we use it

replace the abcdes as the 12345 and also every 12345 have the ascill code 49,50,51,52,54

tarnslate(x,y) values x,y  output replace abcde  instead of 12345
"""

string='this is chaitanya college'
string1='abcde'
string2='12345'
double1=string.maketrans(string1,string2)
string21=string.translate(double1)
print(string21)
print(double1)
print(chr(49),chr(50),chr(51),chr(52),chr(53))

"""  here special characters  gives none values
  x,y,z values are not wroking instead of use it form of like string1,string2,string3

  translate(string1,string2,string3) output is the none is delted actual string will deleted
"""

string22='((&this is chaitanya college'
string1='abcde'
string2='12345'
string3='(&'
double2=string22.maketrans(string1,string1,string3)
string23=string22.translate(double2)
print(string23)
print(double2)
print(chr(40))
print(chr(38))

string1.translate(double2)

chr(49)
print(chr(2))

string5="abcdabcede"
string6=set(string5)
print(string6)
result=""
string7=[]
for x in string6:
  b=x+result
  print(b)
  string7.append(b)
string8=''.join(string7)
print(f"to printed the join method {string8}")


#string9=''.join(sorted(string8))
#print("sorted by the ascending order:",string9)
#string10=''.join(sorted(string7,reverse=True))
#print(string10)

"""slice (start,stop,step)"""

list=['apple','ant','axes','amma','amino acids']
print(list[:])
print("slicing between the zero index to the last index ",list[0:5])
print("slicing between specific range :", list[0:4])
print("two index before values geeting itself but second excluded ",list[:2])
print("two index after values we are getting",list[2:])
print("her the two dots are start and stop:",list[::])
print(" we are using the start and stop and step values ",list[0:5:2])
print(" we are using the start and stop and step values ",list[1:5:2])
print(list[::-1])

print(list[::2]) #even number element printed
print(list[::1])#all elements printed
print(list[::2]+list[1::2]) #even number element printed and all odd number using [1::2] like 1,1+2=3,3+2=5

list26=['apple','green','blue']
list26.append('yellow')
list26.extend(['black','green'])
list26.remove('green')
print(list26)



""": first cloumn start

::first and second cloumn are start ,stop
:: first and second and step automatically are start,stop,step
"""

numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
print(len(numbers))
print(numbers[:])
print(numbers[::])
print(numbers[::1])
print(numbers[::-1])
print("we are acces 0 to 6 using neagtive index:",numbers[:-3]) #: cloumn taking negatively  and step default is taken by one
print("above code",numbers[-10:-3])
print("above code is number",numbers[-1:-5:-1])
print("above code using the positive index ",numbers[0:7])
print()

my_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
result = my_numbers[-1:-8:-1]
print(result)

my_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Example 1: Get a sublist from the end with step -2
sublist1 = my_numbers[-1::-2]
print(sublist1)  # Output: [10, 8, 6, 4, 2]

# Example 2: Get a sublist from index -3 to index -8 with step -1
sublist2 = my_numbers[-3:-9:-1]
print(sublist2)  # Output: [8, 7, 6, 5, 4, 3]

# Example 3: Get a sublist from index -2 to the end with step -1
sublist3 = my_numbers[-2::-1]
print(sublist3)  # Output: [9, 8, 7, 6, 5, 4, 3, 2, 1]

# Example 4: Get a reversed sublist with step -1
reversed_numbers = my_numbers[::-1]
print(reversed_numbers)  # Output: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

my_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Example 1: Get a sublist from the end with step -1
sublist1 = my_numbers[-1::-1]
print(sublist1)  # Output: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

# Example 2: Get every second element in reverse order
sublist2 = my_numbers[-1::-2]
print(sublist2)  # Output: [10, 8, 6, 4, 2]

# Example 3: Get a sublist from index -4 to the end with step -1
sublist3 = my_numbers[-4::-1]
print(sublist3)  # Output: [7, 6, 5, 4, 3, 2, 1]

# Example 4: Get a sublist from index -3 to index -8 with step -2
sublist4 = my_numbers[-3:-9:-2]
print(sublist4)  # Output: [8, 6, 4]

# Example 5: Get a sublist from index -2 to index -7 with step -1
sublist5 = my_numbers[-2:-8:-1]
print(sublist5)  # Output: [9, 8, 7, 6, 5, 4]

# Example 6: Get a sublist from index -5 to index -1 with step -1
sublist6 = my_numbers[-5::-1]
print(sublist6)  # Output: [6, 5, 4, 3, 2, 1]

my_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(my_numbers[-1:-10:-1])
print(my_numbers[-2:-10:-2])
print(my_numbers[:-1]) #:startt from -1 and stop from -10
print("above code foe the ",my_numbers[-10:-1]) #-1 higher than -10 is not excuted


print(my_numbers[-1:-10:-3])
print(my_numbers[-1::-2])
print(my_numbers[-2::-2])
print(my_numbers[-1::-1])
print(my_numbers[-1:-10:-4])
print(my_numbers[1:-6:4])

my_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
result = my_numbers[1:-7:4]
print(result)
numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
print("above code is number", numbers[:-3:-4])

my_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
result = my_numbers[-1:-3:-5]
print(result)
print(my_numbers[-1:10:5])

my_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
result = my_numbers[-1:10:5]
print(result)
my_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
result1 = my_numbers[10:-1:-5]
print(result1)