# -*- coding: utf-8 -*-
"""Untitled67.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BmeAGToDq7qQjsfZQ6127RGVu7Dv2LfL
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt



df=pd.read_csv("/content/hotel_bookings 2.csv")

df

df.shape

df.tail()

df.info()

df.isnull().sum()



"""here more number null found just drop it"""

df['company'].isnull().sum()*100/df.shape[0]

df['agent'].isnull().sum()*100/df.shape[0]

"""drop"""

df.drop(['company','agent'],axis=1,inplace=True)
df

df.isnull().sum()

df.describe()

"""describe used to get numberical columns"""

for col in df.describe(include='number').columns:
  print(col)
  print(df[col].unique())

"""describe used to get categorical columns"""

for col in df.describe(exclude='number').columns:
  print(col)
  print(df[col].unique())

"""nunique()"""

for col in df.describe(include='number').columns:
  print(col)
  print(df[col].nunique())

for col in df.describe(exclude='number').columns:
  print(col)
  print(df[col].nunique())

"""isin"""

df['country'].isin(['PRT','GBR'])

df['country'].value_counts()

df

df.sort_values(by='adults',ascending=False).head(10)

import seaborn as sns
ax=sns.countplot(data=df,x='is_canceled',edgecolor='black')
for bars in ax.containers:
  ax.bar_label(bars)

df1=df.is_canceled.value_counts(normalize=True)
df1

"""pie chart in pandas"""

df1.plot(kind='pie',autopct='%1.2f%%',legend=True,shadow=True,explode=[0.1,0], figsize=(5,10))

"""pie chart in matplotlib"""

df2=df['is_canceled'].value_counts().tolist()

df3=df['is_canceled'].value_counts().index

import matplotlib.pyplot as plt

plt.pie(df2,labels=df3,autopct='%1.2f%%',startangle=90,shadow=True,explode=[0,0.1])
plt.legend(['red','green'])
plt.title("pie chart",loc='center')

df

df['arrival_date_day_of_month'].value_counts(normalize=True)

import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize=(10,12))
plt.subplot(2,2,1)
plt.hist(df['arrival_date_day_of_month'])
plt.xlabel("arrival date of month")
plt.ylabel("count")
plt.subplot(2,2,2)
plt.hist(df['is_canceled'])
plt.xlabel("is_canceled")
plt.ylabel("count")
plt.subplot(2,2,3)
plt.hist(df['adr'])
plt.xlabel("customer type")
plt.ylabel("count")
plt.subplot(2,2,4)
plt.hist(df['arrival_date_year'])
plt.xlabel("arrival date of year")
plt.ylabel("count")

print("month;",df['arrival_date_day_of_month'].value_counts(normalize=True).round(2))
print("*********")
print("year:",df['arrival_date_year'].value_counts(normalize=True).round(2))
print("***********")
print("customer type:",df['customer_type'].value_counts(normalize=True).round(2))
print("*****")
print("is_canceled:",df['is_canceled'].value_counts(normalize=True).round(2))
print("********")

df.head(2)

#df['status_date']=pd.to_datetime(df['status_date'],dayfirst=True)
df['reservation_status_date'] = pd.to_datetime(df['reservation_status_date'], dayfirst=True)
df['year']=df['reservation_status_date'].dt.year
df['month']=df['reservation_status_date'].dt.month
df['dayofweek']=df['reservation_status_date'].dt.dayofweek

df

import seaborn as sns
plt.figure(figsize=(20,10))
ax=sns.countplot(data=df,x='month',hue='reservation_status')
for bars in ax.containers:
  ax.bar_label(bars)

import seaborn as sns
plt.figure(figsize=(20,10))
ax=sns.countplot(data=df,x='reservation_status')
for bars in ax.containers:
  ax.bar_label(bars)

#it gives average value as default
#estimator parameter we will do some perform it user intersts like min,max,sumlike
plt.figure(figsize=(20,10))
ax=sns.barplot(data=df,x='month',y='adr')
for bars in ax.containers:
  ax.bar_label(bars)
plt.title('year vs adr',loc='left',fontsize=20)
plt.xlabel("year",loc='left')
plt.ylabel("adr",loc='center')

df['year'].value_counts(normalize=True).round(2)

df.groupby('month')['adr'].mean()

df

"""find the avearge of adr colum"""

df4=df.groupby(['month','hotel'])['adr'].mean().reset_index()
df4

import plotly.express as px
import pandas as pd
px.sunburst(df4,path=['month','hotel'],values='adr')

df5=df.groupby(['month','hotel'])['adr'].max().reset_index()
df5

import plotly.express as px
import pandas as pd
px.sunburst(df5,path=['month','hotel'],values='adr')

df5=df.groupby(['month','hotel'])['adr'].max()
df5

resort=df[df['hotel']=='Resort Hotel']
resort

resort.shape

resort

resort['stays_in_weekend_nights'].value_counts(normalize=True).round(2)

resort['stays_in_week_nights'].value_counts(normalize=True).round(2)

"""conclusions:weekend>week"""

resort['total_of_special_requests'].value_counts(normalize=True).round(2)

resort['arrival_date_week_number'].value_counts(normalize=True)

plt.figure(figsize=(20,10))
ax=sns.countplot(data=resort,x='arrival_date_week_number')
for bars in ax.containers:
  ax.bar_label(bars)

resort[:1]

resort['customer_type'].value_counts()

"""countplot in facetgrid"""

import seaborn as sns
plt.figure(figsize=(20,5))
g=sns.FacetGrid(resort,col='customer_type',height=3,aspect=1)
g.map(sns.countplot,'month')
#g.fig.suptitle('Cancellations per Month by Category')
g.set_axis_labels('Month', 'Number of Cancellations')
g.set_titles("customer type: {col_name}")

plt.figure(figsize=(20,5))
g=sns.FacetGrid(resort,col='customer_type',row='is_canceled',height=3,aspect=1,hue='is_canceled')
g.map(sns.countplot,'month').add_legend()

g.set_axis_labels('Month', 'Number of Cancellations')
g.set_titles("customer type: {col_name}","is_canceled:{row_name}")
plt.show()

"""box in plotly it will values summary"""





#but no need gives  color is month
#because we are provide animation frame is month once you click it and you will view the month and each every month
#lables will x and y  actutally we are taking the y variables and label print on yside
import plotly.express as px
fig=px.box(resort,y='adr',points='all',template='plotly_dark',animation_frame='month',color='is_canceled',labels={'adr': 'addresable'})
fig.update_layout(title_text="adr",title_x=0.5)

plt.figure(figsize=(20,5))
g=sns.FacetGrid(resort,col='customer_type',row='is_canceled',height=3,aspect=1,hue='is_canceled')
g.map(sns.countplot,'month').add_legend()

g.set_axis_labels('Month', 'Number of Cancellations')
g.set_titles("customer type: {col_name}","is_canceled:{row_name}")
plt.show()

resort['arrival_date_year'].value_counts()

plt.figure(figsize=(20,5))
g=sns.FacetGrid(resort,col='year',height=3,aspect=1,hue='is_canceled')
g.map(sns.countplot,'month').add_legend()

g.set_axis_labels('Month', 'Number of Cancellations')
#g.set_titles("customer type: {col_name}","is_canceled:{row_name}")
plt.show()

plt.figure(figsize=(20,5))
g=sns.FacetGrid(resort,col='year',row='is_canceled',height=3,aspect=1,hue='is_canceled')
g.map(sns.countplot,'month').add_legend()

g.set_axis_labels('Month', 'Number of Cancellations')
g.set_titles("customer type: {col_name}","is_canceled:{row_name}")
plt.show()

resort['year'].value_counts(normalize=True)

a=resort[resort['year']==2016]
a

#a['month'].value_counts(normalize=True)
ax=sns.countplot(data=a,x='month',hue='is_canceled')
for bars in ax.containers:
  ax.bar_label(bars)

a['month'].value_counts()

first_month_2016=906+637

print(first_month_2016)

b=resort[resort['year']==2017]
b

ax=sns.countplot(data=b,x='month',hue='is_canceled')
for bars in ax.containers:
  ax.bar_label(bars)

b['month'].value_counts()

c=resort[resort['year']==2015]
c

c['month'].value_counts()

d=resort[resort['year']==2014]
d

d['month'].value_counts()

resort['required_car_parking_spaces'].value_counts()

resort['total_of_special_requests'].value_counts()

plt.figure(figsize=(20,5))
g=sns.FacetGrid(resort,col='total_of_special_requests',row='is_canceled',height=3,aspect=1,hue='is_canceled')
g.map(sns.countplot,'month').add_legend()

g.set_axis_labels('Month', 'Number of Cancellations')
g.set_titles("customer type: {col_name}")
plt.show()

plt.figure(figsize=(20,5))
g=sns.FacetGrid(resort,col='adults',height=3,aspect=1,hue='is_canceled')
g.map(sns.countplot,'adults').add_legend()

#g.set_axis_labels('Month', 'Number of Cancellations')
g.set_titles("customer type: {col_name}")
plt.show()

e=resort[resort['adults']==0]
e

e['month'].value_counts()

resort['adults'].value_counts()

plt.figure(figsize=(20,5))
g=sns.FacetGrid(resort,col='is_canceled',height=3,aspect=1,hue='is_canceled')
g.map(sns.countplot,'is_canceled').add_legend()

#g.set_axis_labels('Month', 'Number of Cancellations')
g.set_titles("col_template: {col_name}")
plt.show()

plt.figure(figsize=(20,5))
g=sns.FacetGrid(resort,col='customer_type',height=3,aspect=1,hue='is_canceled')
g.map(sns.countplot,'customer_type').add_legend()

#g.set_axis_labels('Month', 'Number of Cancellations')
g.set_titles("customer type: {col_name}")
plt.show()

resort.head(2)

resort['customer_type'].value_counts()

plt.figure(figsize=(20,5))
g=sns.FacetGrid(resort,col='dayofweek',height=3,aspect=1,hue='is_canceled')
g.map(sns.countplot,'adults').add_legend()

#g.set_axis_labels('Month', 'Number of Cancellations')
g.set_titles("customer type: {col_name}")
plt.show()

resort.head(2)

plt.figure(figsize=(20,5))
g=sns.FacetGrid(resort,row='is_canceled',col='customer_type',col_order=['Group','contract','Transient','Transient-Party'],row_order=[0,1],height=3,aspect=1,)
g.map(sns.countplot,'is_canceled').add_legend()

#g.set_axis_labels('Month', 'Number of Cancellations')
g.set_titles("col_template: {col_name}","row_template:{row_name}")
plt.show()

sns.countplot(data=resort ,x='is_canceled',hue='customer_type')

resort

df4=df.groupby(['hotel','month'])['adr'].mean().reset_index()
df4

px.sunburst(df4,path=['hotel','month'],values='adr')

df['hotel'].value_counts()

df5=df.groupby(['hotel','month','year'])['adr'].mean().reset_index()
df5

px.sunburst(df5,path=['hotel','month','year'],values='adr')

g=sns.FacetGrid(resort,col='stays_in_weekend_nights',row='is_canceled',hue='is_canceled')
g.map(sns.countplot,'stays_in_weekend_nights').add_legend()
g.set_titles("col_template:{col_name}","row_template:{row_name}")

resort.columns

resort[['babies','children','previous_bookings_not_canceled','meal','market_segment']]

re=resort['meal'].value_counts()
re

"""barh in pandas"""

re.sort_index(ascending=False).plot(kind='barh')

resort['previous_bookings_not_canceled'].value_counts()

plt.figure(figsize=(22,15))
plt.subplot(3,3,1)
plt.hist(resort['babies'])
plt.xlabel("babies")
plt.ylabel("count")
plt.subplot(3,3,2)
plt.hist(resort['meal'])
plt.xlabel("meal")
plt.ylabel("count")


plt.subplot(3,3,3)
plt.hist(resort['is_repeated_guest'])
plt.xlabel("is_repeated")
plt.ylabel("count")
plt.legend(["something"])
plt.subplot(3,3,4)
plt.hist(resort['previous_cancellations'])
plt.xlabel("previous cancellation")
plt.ylabel("count")

plt.subplot(3,3,5)
plt.hist(resort['market_segment'])
plt.xlabel("market segment")
plt.ylabel("count")
plt.subplot(3,3,6)
plt.hist(resort['month'])
plt.xlabel("month")
plt.ylabel("count")
plt.subplot(3,3,7)
plt.hist(resort['distribution_channel'])
plt.xlabel("distribution")
plt.ylabel("count")
plt.subplot(3,3,8)
plt.hist(resort['year'])
plt.xlabel("customet type")
plt.ylabel("count")
plt.subplot(3,3,9)
plt.hist(resort['year'])
plt.xlabel("year")
plt.ylabel("count")

sns.countplot(data=resort,x='meal',hue='children')

plt.figure(figsize=(10,5))
ax=sns.barplot(data=resort,x='market_segment',y='adr',hue='is_canceled')
for bar in ax.containers:
  ax.bar_label(bars)

import plotly.express as px
fig=px.bar(resort,x='market_segment',y='adr',template="plotly_dark",color='customer_type',text_auto=True)
fig.show()



g=sns.FacetGrid(resort,col='is_repeated_guest',hue='customer_type')
g.map(sns.histplot,'is_repeated_guest').add_legend()

import seaborn as sns
#sns.boxplot(data=resort,x='customer_type',y='adr',hue='is_canceled',color='red')
sns.scatterplot(data=resort[:4000],x='customer_type',y='adr',hue='is_canceled',color='red')

resort['is_repeated_guest'].value_counts()

for col in resort.describe(exclude='number').columns:
  print(col)

resort.columns



re1=resort['stays_in_weekend_nights'].value_counts()
re1

"""bar in pandas"""

re1.sort_index(ascending=True).plot(kind='bar')

resort.columns

"""facetgrid"""

g=sns.FacetGrid(resort,col='meal',row='is_canceled',hue='is_canceled',ylim=(0,20000))
g.map(sns.countplot,'meal').add_legend()
g.set_titles("col_template={col_name}","row_template={row_template}")
g.set_axis_labels("meals","count")

g=sns.FacetGrid(resort,col='market_segment',row='is_canceled',hue='is_canceled',ylim=(0,20000))
g.map(sns.countplot,'meal').add_legend()
g.set_titles("col_template={col_name}","row_template={row_template}")
g.set_axis_labels("meals","count")
g.fig.suptitle('Countplot of Sex for Each Day', y=1.02)

g=sns.FacetGrid(resort,col='market_segment',row='adults',col_order=['Direct','Corporate','Online TA','Offline TA/TO','Complementary','Groups'],row_order=[0,1,2,3,4,5,6,20,26,27,40,50,55],ylim=(0,20000))
g.map(sns.countplot,'meal').add_legend()
g.set_titles("col_template={col_name}","row_template={row_template}")
g.set_axis_labels("meals","count")

g=sns.FacetGrid(resort,col='children',row='reservation_status',hue='is_canceled',ylim=(0,20000))
g.map(sns.countplot,'children').add_legend()
g.set_titles("col_template={col_name}","row_template={row_name}")
g.set_axis_labels("children","count")

"""What is the meaning of no show in hotel?
The “no show” occurs when a guest books a hotel room but does not show up and does not cancel the reservation.

1..in reservation status highest numbe of cancellations
2..in 2016 from the reservation_status highest of number
"""

plt.figure(figsize=(20,10))
ax=sns.countplot(resort,x='reservation_status',hue='year')
for bars in ax.containers:
  ax.bar_label(bars)

"""1..IN 2016 MORE NUMBER GOING ON 3362
2..ONLINE TA MEAN ONLINE TRANSPORT AGENCY  MORE NUMBER OF GUYS IN 2016
3..ONLINE BOKING MORE NUMBER
"""

plt.figure(figsize=(10,7))
ax=sns.countplot(resort,x='market_segment',hue='year')
for bars in ax.containers:
  ax.bar_label(bars)

"""1...IN 2016 MORE NUMBER OF BOOKINGS OVER HERE 2...more number of booking in 2016 and cancellation less number
3... 2014 no booking
"""

plt.figure(figsize=(10,10))
ax=sns.countplot(resort,x='year',hue='is_canceled')
for bars in ax.containers:
  ax.bar_label(bars)
#..IN 2016 MORE NUMBER OF BOOKINGS OVER HERE 2...more number of booking in 2016 and cancellation less number 3... 2014 no booking



#for x in resort.describe(include='number').columns:
 #print(x)
ax=sns.countplot(data=resort,x='customer_type')
for bars in ax.containers:
  ax.bar_label(bars)
#individuals or groups that are occupying less than 10 rooms per night.
#
#A hotel management contract is a legally binding agreement between the hotel owner and the management firm.
# group a signed contract guaranteeing the hotel 10 rooms or more per night for an agreed upon date or dates

"""1...0,1,2,3 weeks are number of peoples staying in the weekend

2..... o,1,2 weeks  i think intial time may be cancelation occurs
"""

plt.figure(figsize=(15,10))
ax=sns.countplot(data=resort,x='stays_in_weekend_nights',hue='is_canceled')
for bars in ax.containers:
  ax.bar_label(bars)

#bar gives default mean over here
plt.figure(figsize=(30,10))
ax=sns.barplot(data=resort,x='stays_in_week_nights',y='adr')
for bars in ax.containers:
  ax.bar_label(bars)

resort.groupby(['stays_in_week_nights','stays_in_weekend_nights'])['adr'].mean().head(40)

px.sunburst(resort,path=['stays_in_week_nights','stays_in_weekend_nights'],values='adr')

resort.head(2)

"""1..in room num 122 hours maximum
2..in roomnum 1.0 hours in minimum
"""



a=resort.days_in_waiting_list.value_counts()
a

a.plot(kind='pie',autopct='%1.2f%%',legend=True)

required_car_parking_spaces



resort.previous_cancellations.value_counts()

plt.figure(figsize=(22,15))
plt.subplot(4,4,1)
plt.hist(resort['babies'])
plt.xlabel("babies")
plt.ylabel("count")
plt.subplot(4,4,2)
plt.hist(resort['meal'])
plt.xlabel("meal")
plt.ylabel("count")


plt.subplot(4,4,3)
plt.hist(resort['is_repeated_guest'])
plt.xlabel("is_repeated")
plt.ylabel("count")
plt.legend(["something"])
plt.subplot(4,4,4)
plt.hist(resort['previous_cancellations'])
plt.xlabel("previous cancellation")
plt.ylabel("count")

plt.subplot(4,4,5)
plt.hist(resort['market_segment'])
plt.xlabel("market segment")
plt.ylabel("count")
plt.subplot(4,4,6)
plt.hist(resort['month'])
plt.xlabel("month")
plt.ylabel("count")
plt.subplot(4,4,7)
plt.hist(resort['distribution_channel'])
plt.xlabel("distribution")
plt.ylabel("count")
plt.subplot(4,4,8)
plt.hist(resort['year'])
plt.xlabel("year")
plt.ylabel("count")
plt.subplot(4,4,9)
plt.hist(resort['stays_in_week_nights'])
plt.xlabel("stays_in_week_nights")
plt.ylabel("count")
plt.subplot(4,4,10)
plt.hist(resort['is_repeated_guest'])
plt.xlabel("is_guest")
plt.ylabel("count")
plt.subplot(4,4,11)
plt.hist(resort['previous_cancellations'])
plt.xlabel("previous_cancellations")
plt.ylabel("count")
plt.subplot(4,4,12)
plt.hist(resort['previous_bookings_not_canceled'])
plt.xlabel("previous_booking_not_canceled")
plt.ylabel("count")
plt.subplot(4,4,13)
plt.hist(resort['days_in_waiting_list'])
plt.xlabel("day_in_waiting list")
plt.ylabel("count")
plt.subplot(4,4,14)
plt.hist(resort['required_car_parking_spaces'])
plt.xlabel("required_car_parking_space")
plt.ylabel("count")
plt.subplot(4,4,15)
plt.hist(resort['total_of_special_requests'])
plt.xlabel("total_of_special_requests")
plt.ylabel("count")
plt.subplot(4,4,16)
plt.hist(resort['dayofweek'])
plt.xlabel("dayofweek")
plt.ylabel("count")

for col in resort.describe(include='number').columns:
  print(col)

"""boxplot shows the outliers distribution of points we will showflier=True"""

plt.figure(figsize=(15,10))
sns.catplot(data=resort,kind='box',x='customer_type',y='adr',hue='year',showfliers= True)

"""two plots in single one we will see output i just write normally .you can write yourself"""

plt.figure(figsize=(15,10))
sns.catplot(data=resort,kind='box',x='customer_type',y='adr',hue='year',showfliers= True)
sns.stripplot(data=resort,x='customer_type',y='adr',hue='year')

"""strip"""

plt.figure(figsize=(15,10))
sns.catplot(data=resort,kind='strip',x='customer_type',y='adr',hue='is_canceled')

plt.figure(figsize=(25,10))
sns.violinplot(data=resort,x='children',y='adr',hue='year')

plt.figure(figsize=(25,10))
sns.boxenplot(data=resort,x='children',y='adr',hue='year',showfliers=True)

import matplotlib.pyplot as plt
import numpy as np

# Create sample data
np.random.seed(42)
data1 = np.random.normal(loc=0, scale=1, size=1000)
data2 = np.random.normal(loc=3, scale=1.5, size=1000)

# Plot histograms for both variables
plt.hist(data1, bins=30, alpha=0.5, color='blue', label='Variable 1')
plt.hist(data2, bins=30, alpha=0.5, color='orange', label='Variable 2')

# Add labels and title
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram for Two Variables')

# Add a legend
plt.legend()

# Show the plot
plt.show()

plt.scatter(y=resort['adr'],x=resort['customer_type'])



sns.boxplot(data=resort,x='babies',y='adr',hue='market_segment')

fig=px.box(resort,x='babies',y='adr',color='market_segment',template='plotly_dark',points='all',animation_frame='year',title="year vs adr")
fig.update_xaxes(title_text="Year Comparison")
fig.update_yaxes(title_text="adr will be the vaule")
fig.update_layout(title_text="Year vs ADR", title_x=0.5)

px.bar(resort,x='children')

"""groupby function between columsn"""

b=resort.groupby('month')['adr'].size().rename("count").reset_index()
b

"""barplot

"""

sns.barplot(data=b,x='month',y='month')

"""barplot without barmode"""

px.bar(b,x='month',y='month',text='count',template='plotly_dark')

fig=px.bar(resort,x='month',y='adr',text='adr',template="plotly_dark")
fig.update_xaxes(title_text='month of the daatset')
fig.update_yaxes(title_text='adr')
fig.update_layout(title_text="month vs adr",title_x=0.5)

fig=px.bar(resort,x='year',y='adr',text='adr',color='customer_type',template="plotly_dark",barmode='group')
fig.update_xaxes(title_text='month of the daatset')
fig.update_yaxes(title_text='adr')
fig.update_layout(title_text="month vs adr",title_x=0.5)

resort.groupby('month')['adr'].mean().nlargest(10).sort_values(ascending=True).plot(kind='bar')

b=resort.groupby(['month','year','customer_type'],as_index=True)['adr'].mean().reset_index()
b

px.sunburst(b,path=['month','year','customer_type'],values='adr')

city=df[df['hotel']=='City Hotel']

city.shape

city.children.value_counts()

resort.children.value_counts()

#px.box(city,x='customer_type',y='adr',points='all',template='plotly_dark')
px.box(resort,x='customer_type',y='adr',points='all',template='plotly_dark')

px.box(city,x='customer_type',y='adr',points='all',template='plotly_dark')

city.groupby('customer_type')['adr'].mean()

"""1...city customer_type max value 5400 in transient> resort 450 customer_type max value in transient
2...city customer_type party max value 451 in trasient_party>resort 220 customer _type max value in tarnsient_party
3...resprt customer_type max value 340 in contract> resort 250 customer_type max value in contract

4...city customer_type max value 318 in group> resort 195 customer_type max value in group

"""

resort['booking_changes'].value_counts()

plt.figure(figsize=(10,10))
plt.subplot(1,3,1)
plt.hist(resort['year'])
plt.subplot(1,3,2)
plt.hist(resort['booking_changes'])
plt.subplot(1,3,3)
plt.hist(resort['adults'])

plt.figure(figsize=(10,10))
plt.subplot(1,3,1)
plt.hist(city['year'])
plt.subplot(1,3,2)
plt.hist(city['booking_changes'])
plt.subplot(1,3,3)
plt.hist(city['adults'])

city.booking_changes.value_counts()

city['reservation_status_date'] = pd.to_datetime(city['reservation_status_date'], dayfirst=True)
city['year']=city['reservation_status_date'].dt.year
city['month']=city['reservation_status_date'].dt.month
city['dayofweek']=city['reservation_status_date'].dt.dayofweek

city.head(1)