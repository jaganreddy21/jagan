# -*- coding: utf-8 -*-
"""Untitled77.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y29i-qQwBXU70H0tkgAdSKT10qLVqz2D
"""

list=[1,2,3]
list2=[1,2,3]
list3=[2,3,5.10,2,6,7,890]
print(list is list2)
print(list3)
print(type(list3))
for x in list3:
  if x%2==0:
    print(x)
list2.append([2,34,3,5,6])
list2.extend([2,45,23,3,5,6])
print(list2)
print(len(list2))
print(type(list2))
print(list2[3])
print(list2[3][0])
print(list2[3][2])
print(list2[3][-1])
print(list2[3][-2])
print(list2[3][:1])
print(list2[3][1:])
print(list2[3][:-1])
print(list2[3][-1:])

print(list3)
list4=sum(list3)

print(list4)

list3
list5=[x for x in list3 if x %2==0]
list6=[x for x in list3 if x %2!=0]
count_even=len(list5)
count_odd=len(list6)
print("even cout of numebr",count_even)
print("odd coutn of the numebrs",count_odd)

list5=[x for x in list3 if x%2==0 and x>3]
print(list5)

list5=['jagan','mohan']
[x[::-1].lower()+x[:].lower() for x in list5 ]

def string(n):
  return n[::-1]+n[0]
print(string("jagan"))

n=int(input("enter the n value"))

 even_numbers=[x for x in range(n) if x%2==0]
 even_numbers1=sum(even_numbers)
 count_of_even_number=len(even_numbers)
 print("the even number",even_numbers)
 print(f" sum  of the even number {even_numbers1}")
 print(f" count of the sum of the even number {count_of_even_number}")

n=int(input("enter the n value"))

 even_numbers=[x*x if x%2==0 else x for x in range(n) if x>10]
 print(even_numbers)

string=['venky','pinky','jagan','ramaiah','raghav','rajesh']
length_names=[x for x in string if len(x)>=4]
print(set(length_names)

names2=[2,3,5,6,7,8,2,3,4,5]
numbers=[x for x in names2]
b=set(numbers)
print(b)
print(set(numbers))

"""perfect number using list compreshions"""

n=[x for x in range(20) if x ==sum(i for i in range(1,x) if x%i==0)]
print(n)

start = 1
end = 30  # Adjust the range as needed

perfect_numbers = [num for num in range(start, end + 1) if num == sum(i for i in range(1, num) if num % i == 0)]

print(perfect_numbers)

"""palindrom number or string using list compreshions"""

string=['jagan','mohan']

string_palindrome=[x[::-1] for x in string]
print(string_palindrome)

n = 123

is_palindrome = n == int(str(n)[::-1])

print(f"{n} is {'a palindrome' if is_palindrome else 'not a palindrome'}")

"""prime number using list compresions

wrong
"""

n=int(input("enter the n value"))
p=[x for x in range(n) if x%2!=0 and x>1]
print(p)

"""right apporach"""

start = 2
end = 30  # Adjust the range as needed

prime_numbers = [num for num in range(start, end + 1) if all(num % i != 0 for i in range(2, int(num**0.5) + 1))]

print(prime_numbers)

start=2
end=45
p=[num for num in range(start,end +1) if all(num%i!=0 for i in range(2,num))]
print(p)

"""plaindrome string using list compreshions"""

list_of_names=['amma','nanna','level']
palindrome_string=[word for word in list_of_names if word==word[::-1]]
print(palindrome_string)

words = ['level', 'python', 'radar', 'programming']
palindromes = [word for word in words if word == word[::-1]]
print(palindromes)

number=int(input("enter the number"))
numbers=[num*num if num%2==0 else "jagan" for num in range(number) if num>10]
print(numbers)

"""condition are used by or using list compreshions'"""

number=int(input("enter the number"))
numbers=[num*num if num%2==0 or num%5==0 or  n%3==0 else "jagan" for num in range(number) if num>10]
print(numbers)

"""let use list compresions
we are more conditions filter conditions if num>10
and if _else with help of and conditions
"""

number=int(input("enter the number"))
numbers=[num*num if num%2==0 and num%5==0 and  n%3==0 else "jagan" for num in range(number) if num>10]
print(numbers)

number=int(input("enter the number"))
numbers=[num*num if num==13 or num==16 or num==19 else "jagan" for num in range(number) if num>10]
print(numbers)

list5=[2,4,5,6,34]
list6=[5,6,7,90]
list7=list5+list6
print(list7)

"""list


3. Lists
Lists are ordered.

Lists can contain any arbitrary objects.

List elements can be accessed by index.

Lists can be nested to arbitrary depth.

Lists are mutable.

Lists are dynamic.

"""



"""here the output is ordered and allows to different data types"""

list6=[1,2,3,5,"hello"]
print(list6)

"""update the element single element int"""

list6[0]=45
print(list6)

"""update the multiple elements using multiple different data types like int,str"""

list6[0:4]=[2,'jagan','sai',20.5]
print(f"update the mutiple values or items, {list6}")

"""len function length of the string or variables"""

print(f" length of the list6 is {len(list6)}")

"""list6 what type of datatype"""

print(list6)
print(type(list6))

print(list6[:])

"""What can content a list?

Strings

Floats

Integer

Boolean

Nested List

Nested Tuple

Other data structures

"""

list7=[22,4,6,7,8,[22,4,5,6,'hello','hi'],('jagan','sai')]
print(f" what type of data type is {type(list7)}")

print(f"length of the list7 is {len(list7)}")

print("i have access the particular index ",list7[5])

print("i have access the all elements in a list ",list7[:])

""" update nested list values based upon our requirement"""

print(list7[5])
print("acces the 5 index the first position ",list7[5][0])
print("access the 5 index rhe second position ", list7[5][1])
print("access the all elements in the fifth index",list7[5][:])
print("reeverse the 5 th index positions ",list7[5][::-1])
print(" here the slicing operations perform it ",list7[5][0:4])
print(" here the slicing operations perform it ",list7[5][:-1])

"""append


The append() method in Python is used to add an element to the end of a list.


 It modifies the original list by adding the specified element as its last

 item. Here's an example:
"""

print(list7)
list7.append(10)
print(list7)

"""if you trying add more than one elements that will be as consider the nested list"""

del list7[7:8]
print(list7)
list7.append([2,4,6])
print("adding multiple items or values in the ending position",list7)
print(list7)

"""extend

The extend() method in Python is used to add elements from an iterable

 list() to the end of an existing list. Here's an example:

 if you pass list of elements  that will collborated into the individuals elements
"""

list7.extend([22,4,6])
print("adding the all elements using the extend functions ",list7)

list8=list6+[2,6,8]
print("adding the all element using + operators ",list8)
print(list8)

print(" adding the values using the extends methos ",list7.extend(["jagan","sai"]))

print(list7)

"""if the pass only one string values into the list7"""

list7.extend(['sai'])

print(list7)



"""extend function two tuples brackets with characters that will be split itself"""

list7.extend(('jagan'))
print(list7)

list8.extend(('cs'))
print(list8)

dir("list")

"""insert():

Inserts an element at a specific index.
"""



print(list8)
list8.insert(2,8)
print(list8)

tuple=[2,3,5,7,"hello"]
print(len(list8))
list.insert(12,'tuple')

print(list8)

print(list8)

my_list = [1, 2, 7, 8]

# Create a new list with multiple values inserted at index 2
values_to_insert = [3, 4, 5, 6]
new_list = my_list[:2] + values_to_insert + my_list[2:]

print(new_list)

values_of_the_list=[22,5,67]
for value in values_of_the_list:
  list8.insert(2,value)
print(list8)

values_list=[4,4,4]
for values in values_list:

  list8.insert(4,values)
print(list8)

"""same number came or multiples times because that cell more times"""

list9=list7
print(list9)

one_list=[22,3,6]
values_list_Assign=[22,4,6,7,'Hello']
for values in values_list_Assign:
  one_list.insert(2,values)

print(one_list)

list7=[22, 4, 6, 7, 8, [22, 4, 5, 6, 'hello', 'hi'], ('jagan', 'sai'), [2, 4, 6], 22, 4, 6, 'jagan', 'sai', 'sai', 'j', 'a', 'g', 'a', 'n']
values_list1_Assign=[22,4,7,890,0]
for values1 in values_list_Assign:
  list7.insert(3,values1)

print(list7)

"""index():

Returns the index of the first occurrence of a specified value.
"""

print("return index specified first occurence values ",list9.index(4))
print("return index specified first occurence values ",list9.index(22))
print("return index specified first occurence values ",list9.index(6))
print(list9)
list9.index(4)

"""count():

Returns the number of occurrences of a specified value.
python

"""

print("count of the values is '8'",list8.count(8))
print("count of the values is '2'",list8.count(2))
print("count of the values is '5'",list8.count(5))
print("count of the values is '10'",list8.count(10))
print("count of the values is '5'",list8.count(5))
print("count of the values is '12'",list8.count(12))
print("count of the values is '22'",list8.count(22))
print("count of the values is '10'",list8.count(10))

"""remove is the remove value from the list

for ex is two value came two times within your list then first two value

eliminated from your list
remove(6)

ex:[22,3,5,6,6,7,8,9]=6 is deleted only [22,3,5,6,7,8,9]
"""

list10=[2,3,6,8,970,78,89,2,8,8,10,10]
list10.remove(78)
list10.remove(2)
print(list10)

list10.remove()
print(list10)

"""remove multiple values one thing remebers first occurence element just removed"""

print(list10)
values_remove=[10,8]
for values in values_remove:
  list10.remove(values)
print(list10)

print(list10)
values_remove=[10,6]
for values in values_remove:
  list10.remove(values)
print(list10)

"""list comprehions all most occurence elements complete eliminate for the remove()

:
it is not good ones

---


"""

list11=[22,3,4,8,8,10,10]
num1=[num for num in list11 if (num!=8 and num!=10)]
print(num1)

"""another way remove elements from the list"""

print(list11)
del list11[3:5]
print(list11)

del list[5:9]
print(list)

print(list11)

"""1.pop() is the deleted value ending position from the list"""

list12=['hello','jagan',10,22,55,'jagan','jagan']
list12.pop()
print("pop values from the ending position from the list11",list12)

"""2.if you want to paritcular element are able to specify index"""

list12.pop(1)

list12.pop(2)

"""sort() method:

In-place Sorting: The sort() method is a list method that sorts the elements of

a list in-place, meaning it modifies the original list directly.

it allows only one datatype in sort()
"""

list13=[22,4,5]
list13.sort()
print(list13)

mixed_list = [4, 'apple', 2, 'orange', 7, 'banana', 1, 'cherry', 5]

# Sort the mixed list in-place
mixed_list.sort()

print("Sorted mixed list in-place:", mixed_list)

list14=[2,10,22,6,7,8,90,23,45,67]
list14.sort()
print(list14)

"""sorted in bulit in functions

sorted() function:
New Sorted List: The sorted() function is a built-in function that returns a

new sorted list without modifying the original list.

Sorted list allows be all different data types

sorted(iterable, key=key, reverse=reverse)
"""

mixed_list = [4, 'apple', 2, 'orange', 7, 'banana', 1, 'cherry', 5]

# Sort the mixed list in-place
mixed_list1=sorted(my_list)

print("Sorted mixed list in-place:", mixed_list1)

my_list = [4, 2, 7, 1, 5]
sorted_list = sorted(my_list)
print("Original list:", my_list)
print("Sorted list:", sorted_list)

list15=[2,4,6,2,6,7,90,23,456,70.0]
list15.reverse()
print(list15)

mixed_datatype=sorted(list15,reverse=True ,key=abs)
print(mixed_datatype)

"""reverse true is higher to lower
revrese false is lower to higher

key =len based upon ones
"""

list16=['BC','jagan mohan','jaganmohan']
string_things=sorted(list16,key=len, reverse=True)
print(string_things)

list17=['jagan','jagan123',123]
string1_things=sorted(list16,reverse=False)
print(string1_things)



help("sorted")

list_of_values = [1, 2, 6, 'jagan', 'naaga', 2.0, 5.0 ]

integers_count = 0
alphabetic_strings_count = 0
floats_count= 0

for value in list_of_values:
    if type(value) == int:
        integers_count+=1
    elif type(value) == str and value.isalpha():
        alphabetic_strings_count+=1
    elif type(value) == float:
        floats_count+=1

print("Integers count:", integers_count)
print("Alphabetic Strings:", alphabetic_strings_count)
print("Floats:", floats_count)

list_of_values = [1, 2, 6, 'jagan', 'naaga', 2.0, 5.0]

integers = []
alphabetic_strings = []
floats = []

for value in list_of_values:
    if type(value) == int:
        integers.append(value)
    elif type(value) == str and value.isalpha():
        alphabetic_strings.append(value)
    elif type(value) == float:
        floats.append(value)

print("Integers:", integers)
print("Alphabetic Strings:", alphabetic_strings)
print("Floats:", floats)

a=[22,3,5,'naaga']
count1=0
count2=0
for value in a:
  if isinstance(value,int):
    count1+=count1
  elif isinstance(value,str):
    count2+=count2
print(count1,count2)

"""in this enviorment not here try to use different online comphiler resources you will get output"""

a = [22, 3, 5, 'naaga',2.0 ,5.0,False]
count1 = 0
count2 = 0
count3=0
count4=0

for value in a:
    if isinstance(value, int):
        count1 += 1
    elif isinstance(value, str):
        count2 += 1
    elif isinstance(value,float):
        count3+=1
    elif isinstance(value,bool):
        count4+=1

print("Count of integers:", count1)
print("Count of strings:", count2)
print("Count of float:", count3)
print("Count of bool:", count4)
list_of_values = ['jagan', 'Hello', 'ABHI', 123, 5, 8, 90]
alphabetic_strings = []
numeric_values = []

for value in list_of_values:
    if str(value).isalpha():
        alphabetic_strings.append(value)
    elif str(value).isdigit():
        numeric_values.append(value)

print("Alphabetic Strings:", alphabetic_strings)
print("Numeric Values:", numeric_values)
print("alpha char")
list_of_values = [1, 2, 6, 'jagan', 'naaga', 2.0, 5.0]

integers = []
alphabetic_strings = []
floats = []

for value in list_of_values:
    if type(value) == int:
        integers.append(value)
    elif type(value) == str and value.isalpha():
        alphabetic_strings.append(value)
    elif type(value) == float:
        floats.append(value)

print("Integers:", integers)
print("Alphabetic Strings:", alphabetic_strings)
print("Floats:", floats)

dir("list")

"""capalitize

every word of the starting letter is
"""

string1=['Jagan','mohan','reddy']
for x in string1:
  print(x.capitalize() + " " +x[::-1])

# Example 1: Basic usage
word = "hello"
capitalized_word = word.capitalize()
print(capitalized_word)  # Output: Hello

# Example 2: Capitalize each word in a sentence
sentence = "this is a sample sentence"
capitalized_sentence = sentence.capitalize()
print(capitalized_sentence)  # Output: This is a sample sentence

# Example 3: Capitalize only the first character
mixed_case = "pYTHON iS fUn"
capitalized_mixed_case = mixed_case.capitalize()
print(capitalized_mixed_case)  # Output: Python is fun

"""casefold"""

string2='hello'
string3='Hello'
print(string2.lower()==string3.lower())
print(string2.casefold()==string3.casefold())

str1 = "Hello"
str2 = "hello"
print(id(str1))
print(id(str2))
print("address of the both variables ",id(str1) is id(str2))

# Value equality check
print(str1.casefold() == str2.casefold())  # Output: True

# Address equality check
print(str1.casefold() is str2.casefold())  # Output: False

"""center


The str.center(width) method in Python is used to center-align a string within

 a specified width. The width parameter indicates the total width of the

 resulting centered string. If the width is greater than the length of the

 original string, the string will be padded on both sides with spaces.
"""

string5='jagan'
width=20
string5.center(width)

original_list = ["apple", "banana", "cherry"]

# Define the width for center alignment
width = 20

# Center-align each element in the list
centered_list = [element.center(width) for element in original_list]

# Print the original and centered lists
print("Original List:", original_list)
print("Centered List:")
for centered_element in centered_list:
    print(centered_element)

string3_list_of_elements=['anna','chh','reactors']
width=20
center_list=[num.center(width) for num in string3_list_of_elements]
print("center of the elements",center_list)
print("center of the elements:")
for center in center_list:
  print(center)

"""count"""

list17 = ['jagan', 'mohan', 'reddy']
count = 0

for word in list17:
    for char in word:
        if char == 'a':
            count += 1

print(count)

count_values_in_a=[word.count('a') for word in list17]
count1=len(count_values_in_a)
print(f" above the list17 a how many occurences over here {count1}")

"""endswith"""

endswith_apporach=[word for word in list18 if word.endswith('a')]
print(f"every word of the string is 'a {endswith_apporach}")

"""another apporach"""

for y in list18:
  if y.endswith('a'):
     print(f" {y} word of a")

"""startswith"""

[word for word in list18 if word.startswith('a')]

for x in list18:
  if x.startswith('a'):
    print(f" {x}is found in 'a'")

for y

list18 = ['jagan', 'amma', 'amulya', 'acha', 'chaltha']

for word in list18:
    if word.endswith('a'):
        print(f"{word} ends with 'a'")

original_string = 'Hello\tWorld!\tPython'

# Expand tabs using the default (8 spaces)
expanded_string_default = original_string.expandtabs()

# Expand tabs using a specific number of spaces (e.g., 4)
expanded_string_4_spaces = original_string.expandtabs(4)

# Print the results
print("Original String:", original_string)
print("Expanded with Default (8 spaces):", expanded_string_default)
print("Expanded with 4 spaces:", expanded_string_4_spaces)

list18=['hello','reddy']
simple=[]
for x in list18:
  expanded_string=x.expandtabs(12)
  simple.append(expanded_string)

print(simple)

list18 = ['hello', 'reddy']

for x in list18:
    expanded_string = x.expandtabs()
    print(expanded_string)

string_of_the_letters='jagan mohan reddy'
expanded=string_of_the_letters.expandtabs(8)
print(expanded)

dir('list')