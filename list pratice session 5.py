# -*- coding: utf-8 -*-
"""Copy of Welcome To Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1znR3ywxZDTvkQdGirYl6YMdIfXRYYNP-
"""

a=[2,3,5]*5
print(a)
b=[2,3,4]
print(b*5)

def even_number(number):
  for x in number:
    if x%2==0:
      print(x)
number=[1,3,4,5,6,78]
map(even_number,number)

"""144. Write a Python program to extract every first or specified element from a given two-dimensional list.

Original list of lists:

[[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]



Extract every first element from the said given two dimensional list:

[1, 4, 7]

Extract every third element from the said given two dimensional list:

[3, 6, 9]
"""

def first_column(numbers,n):
  result=[x[n] for x in number]
  return result
number=[[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]
n=0
print(f"Extract every first element from the said given two dimensional list:{number}")
print(first_column(number,n))
print(len(number))
n=2
print(f"Extract every third element from the said given two dimensional list:{number}")
print(first_column(number,n))

"""Generate a number in a specified range (1, 10) except [2, 9, 10]


7
Generate a number in a specified range (-5, 5) except [-5,0,4,3,2]
-4

value changes untill the run program we will get actual values 7,-4
"""

from random import choice
def range_of_the_element(start,end,n):
  result=choice([x for x in range(start,end)if x not in n])
  return result
start=1
end=10
n=[2,9,10]
print(range_of_the_element(start,end,n))

start=-5
end=5
n=[-5,0,4,3,2]
print(range_of_the_element(start,end,n))

# prompt: 146. Write a Python program to compute the sum of digits of each number in a given list. Original tuple: [10, 2, 56] Sum of digits of each number of the said list of integers: 14 Original tuple: [10, 20, 4, 5, 'b', 70, 'a'] Sum of digits of each number of the said list of integers: 19 Original tuple: [10, 20, -4, 5, -70] Sum of digits of each number of the said list of integers: 19\

def sum_of_digits(num):
    if isinstance(num, int):
        return sum([int(i) for i in str(num)])
    return 0

nums = [10, 2, 56]
print(sum(map(sum_of_digits, nums)))

nums = [10, 20, 4, 5, 'b', 70, 'a']
print(sum(map(sum_of_digits, nums)))

nums = [10, 20, -4, 5, -70]
print(sum(map(sum_of_digits, nums)))

def sum_of_digits(num):
    # Check if the input is an integer
    if isinstance(num, int):
        # Convert the integer to a string, iterate over its digits, and sum them up
        return sum([int(i) for i in str(num)])

# Example list of integers
nums = [10, 2, 56]

# Print a message indicating the operation to calculate the sum of digits in the list
print("Sum of digits of each number in the list:")
# Use map to apply sum_of_digits to each element in nums and then calculate the overall sum
print("Result:", sum(map(sum_of_digits, nums)))

# Example list with a mix of integers and non-integer values
nums = [10, 20, 4, 5, 'b', 70, 'a']

# Print a message indicating the operation to calculate the sum of digits in the list
print("\nSum of digits of each number in the list:")
# Use map to apply sum_of_digits to each element in nums and then calculate the overall sum
print(sum(map(sum_of_digits, nums)))

# Example list of integers, including negative values
nums = [10, 20, -4, 5, -70]

# Print a message indicating the operation to calculate the sum of digits in the list
print("\nSum of digits of each number in the list:")
# Use map to apply sum_of_digits to each element in nums and then calculate the overall sum
print("Result:", sum(map(sum_of_digits, nums)))

def sum_of_digits(num):
    # Check if the input is an integer
    if isinstance(num, int):
        # Convert the integer to a string, iterate over its digits, and sum them up
        return sum([int(i) for i in str(num)])
    else:
        # Return 0 for non-integer inputs
        return 0

# Example list of integers
nums = [10, 2, 56]

# Print a message indicating the operation to calculate the sum of digits in the list
print("Sum of digits of each number in the list:")
# Use map to apply sum_of_digits to each element in nums and then calculate the overall sum
print("Result:", sum(map(sum_of_digits, nums)))

# Example list with a mix of integers and non-integer values
nums = [10, 20, 4, 5, 'b', 70, 'a']

# Print a message indicating the operation to calculate the sum of digits in the list
print("\nSum of digits of each number in the list:")
# Use map to apply sum_of_digits to each element in nums and then calculate the overall sum
print("Result:", sum(map(sum_of_digits, nums)))

# Example list of integers, including negative values
nums = [10, 20, -4, 5, -70]

# Print a message indicating the operation to calculate the sum of digits in the list
print("\nSum of digits of each number in the list:")
# Use map to apply sum_of_digits to each element in nums and then calculate the overall sum
print("Result:", sum(map(sum_of_digits, nums)))

two_digit_number = input("Type a two digit number: ")
# ðŸš¨ Don't change the code above ðŸ‘†

####################################
#Write your code below this line ðŸ‘‡

#Pulling the Two Digit Number Apart
digit_one = (two_digit_number[0])
digit_two = (two_digit_number[1])

#Converting both back to int
digit_one_new = int(digit_one)
digit_two_new = int(digit_two)

# Adding both
print(digit_one_new + digit_two_new)

def sum_of_digits(number):
  return sum((int(el) for n in number for el in str(n) if el.isdigit()))



number = [10, 2, 56]
print(sum_of_digits(number))



def sum_of_digits(nums):
    # Use a nested generator expression to iterate over elements in 'nums'
    # Convert each element to a string and iterate over its characters
    # Use 'isdigit()' to check if a character is a digit, convert it to an integer, and sum them
    return sum(int(el) for n in nums for el in str(n) if el.isdigit())

# Create a list of integers 'nums'
number = [10, 2, 56]

# Print a message indicating the original list
print("Original tuple:")
print(number)

# Print a message indicating the operation to calculate the sum of digits in the list
print("Sum of digits of each number of the said list of integers:")
# Call the 'sum_of_digits' function with 'nums' and print the result
print(sum_of_digits(number))
number = [10, 20, 4, 5, 'b', 70, 'a']
print(sum_of_digits(number))
number = [10, 20, -4, 5, -70]
print(sum_of_digits(number))

"""[1, 2, 7, 8, 3, 7]

[4, 3, 8, 9, 4, 3, 8, 9]

Interleave two given list into another list randomly:

[4, 1, 2, 3, 8, 9, 4, 3, 7, 8, 9, 8, 3, 7]
"""

import random

l1=[1, 2, 7, 8, 3, 7]
l2=[4, 3, 8, 9, 4, 3, 8, 9]

l1.extend(l2)
print(l1)
p=random.randint(l1)

from random import sample
l1=[1, 2, 7, 8, 3, 7]
l2=[4, 3, 8, 9, 4, 3, 8, 9]
a = a + b.copy()
c = sample(a, k=(len(a)))
print(c)

import random

# Original lists
list1 = [1, 2, 7, 8, 3, 7]
list2 = [4, 3, 8, 9, 4, 3, 8, 9]

# Combine two lists into another list randomly
combined_list = list1 + list2  # Concatenate the two lists

# Shuffle the combined list randomly
random.shuffle(combined_list)

# Print the original lists
print("Original lists:")
print(list1)
print(list2)

# Print the interleaved list
print("\nInterleaved two given lists into another list randomly:")
print(combined_list)

a_list = [1, 2, 7, 8, 3, 7]
b_list = [4, 3, 8, 9, 4, 3, 8, 9]
result = []
while a_list and b_list:
  result.append(a_list.pop(0))
  result.append(b_list.pop(0))
result.extend(a_list)
result.extend(b_list)
print(result)

"""148. Write a Python program to remove specific words from a given list.
Original list:
['red', 'green', 'blue', 'white', 'black', 'orange']

Remove words:

['white', 'orange']

After removing the specified words from the said list:
['red', 'green', 'blue', 'black']
Click me to see the sample solution
"""

def remove_word(number,n):
  remove_word=[x for x in number if x not in n]
  return remove_word
number=['red', 'green', 'blue', 'white', 'black', 'orange']
n=['white', 'orange']
print(remove_word(number,n))

from itertools import permutations
a = ['orange', 'red', 'green', 'blue']
print(list(permutations(a)))

from itertools import combinations
a=['orange', 'red', 'green', 'blue']

b=[]
for i in range(len(a)):
  b.append(list(combinations(a,i)))
print(b)

"""149. Write a Python program to get all possible combinations of the elements of a given list.
Original list:
['orange', 'red', 'green', 'blue']

All possible combinations of the said list's elements:



[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'],
 ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'],
  ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]
"""

from itertools import chain, combinations

def all_combinations(input_list):
    # Generate all possible combinations using the itertools combinations function
    all_combinations = list(chain.from_iterable(combinations(input_list, r) for r in range(len(input_list) + 1)))
    return all_combinations

# Original list
original_list = ['orange', 'red', 'green', 'blue']

# Get all possible combinations
combinations_list = all_combinations(original_list)

# Print the original list
print("Original list:")
print(original_list)

# Print all possible combinations
print("\nAll possible combinations of the said list's elements:")
print(combinations_list)

"""combinations allow two parameters like(a,b) this

> Indented block


"""

from itertools import combinations
num=['orange', 'red', 'green', 'blue']
b=[]
for x in range(len(a)+1):
  b.append(list(combinations(a,x)))
print(b)

"""150. Write a Python program to reverse a given list of lists.
Original list:

[['orange', 'red'], ['green', 'blue'], ['white', 'black', 'pink']]

Reverse said list of lists:
[['white', 'black', 'pink'], ['green', 'blue'], ['orange', 'red']]

Original list:
[[1, 2, 3, 4], [0, 2, 4, 5], [2, 3, 4, 2, 4]]
Reverse said list of lists:
[[2, 3, 4, 2, 4], [0, 2, 4, 5], [1, 2, 3, 4]]
Click me to see the sample solution
"""

def reversed_number(number):
  return number[::-1]
number=[['orange', 'red'], ['green', 'blue'], ['white', 'black', 'pink']]
print(reversed_number(number))
number=[[1, 2, 3, 4], [0, 2, 4, 5], [2, 3, 4, 2, 4]]
print(reversed_number(number))

"""3. Write a Python program to reverse strings in a given list of string values.
Original lists:

['Red', 'Green', 'Blue', 'White', 'Black']

Reverse strings of the said given list:

['deR', 'neerG', 'eulB', 'etihW', 'kcalB']
"""

number=['Red', 'Green', 'Blue', 'White', 'Black']
num=[]
for x in number:
  num.append(x[::-1])
print(num)

"""151. Write a Python program to find the maximum and minimum values in a given list within a specified index range.
Original list:
[4, 3, 0, 5, 3, 0, 2, 3, 4, 2, 4, 3, 5]

Index range:
3 to 8

Maximum and minimum values of the said given list within index range:
(5, 0)

Click me to see the sample solution
"""

number20=[4, 3, 0, 5, 3, 0, 2, 3, 4, 2, 4, 3, 5]
c=max(number20[3:9])
d=min(number20[3:9])
print((c,d))

"""154. Write a Python program to join two given list of lists of the same length, element wise.
Original lists:

[[10, 20], [30, 40], [50, 60], [30, 20, 80]]

[[61], [12, 14, 15], [12, 13, 19, 20], [12]]

Join the said two lists element wise:

[[10, 20, 61], [30, 40, 12, 14, 15], [50, 60, 12, 13, 19, 20], [30, 20, 80, 12]]
Original lists:

[['a', 'b'], ['b', 'c', 'd'], ['e', 'f']]

[['p', 'q'], ['p', 's', 't'], ['u', 'v', 'w']]

Join the said two lists element wise:

[['a', 'b', 'p', 'q'], ['b', 'c', 'd', 'p', 's', 't'], ['e', 'f', 'u', 'v', 'w']]
"""

list1=[[10, 20], [30, 40], [50, 60], [30, 20, 80]]
list2=[[61], [12, 14, 15], [12, 13, 19, 20], [12]]
def combine_elements(list1,list2):
  number_values=[list(x+y) for x,y in zip(list1,list2)]
  return number_values
list1=[[10, 20], [30, 40], [50, 60], [30, 20, 80]]
list2=[[61], [12, 14, 15], [12, 13, 19, 20], [12]]
print(combine_elements(list1,list2))
list1=[['a', 'b'], ['b', 'c', 'd'], ['e', 'f']]

list2=[['p', 'q'], ['p', 's', 't'], ['u', 'v', 'w']]
print(combine_elements(list1,list2))

"""155. Write a Python program to add two given lists of different lengths, starting on the left.
Original lists:
[2, 4, 7, 0, 5, 8]

[3, 3, -1, 7]

Add said two lists from left:

[5, 7, 6, 7, 5, 8]
Original lists:

[1, 2, 3, 4, 5, 6]

[2, 4, -3]
Add said two lists from left:
[3, 6, 0, 4, 5, 6]
"""

def add_elements(list1,list2):
  result=[list(x+y) for x,y in zip(list1,list2)]
  return result
list1=[2, 4, 7, 0, 5, 8]
list2=[3, 3, -1, 7]
print(add_elements(list1,list2))
list1=[5, 7, 6, 7, 5, 8]
list2=[1, 2, 3, 4, 5, 6]
print(add_elements(list1,list2))

def add_two_lists(l1, l2):
    result = []
    # Iterate over the indices and elements of the first list (l1)
    for i, j in enumerate(l1):
      print(i)
      print(j)
      for k, z in enumerate(l2):
        if k == i:
          result.append(j + z)

    # Calculate the difference in lengths between the two lists
    a = len(l1) - len(l2)
    # Append the remaining elements of the longer list to the result
    result.extend(l1[-a:])
    print(result)
    # Return the final result list
    return result

l1=[2, 4, 7, 0, 5, 8]
l2=[3, 3, -1, 7]
print(add_two_lists(l1,l2))

from itertools import zip_longest

def add_lists_from_right(list1, list2):
    # Reverse both lists


    # Use zip_longest to pad the shorter list with zeros
    result = [x + y for x, y in zip_longest(reversed_list1, reversed_list2, fillvalue=0)][::-1]

    return result
list1=[2, 4, 7, 0, 5, 8]
list2=[3, 3, -1, 7]
print(add_lists_from_right(list1,list2))

def add_lists_from_left(list1, list2):
    # Determine the lengths of the two lists
    len1 = len(list1)
    len2 = len(list2)

    # Pad the shorter list with zeros on the right to match the length of the longer list
    if len1 < len2:
        list1 += [0] * (len1 - len2)
        print("lenghts",list1)
    elif len2 < len1:
        list2 += [0] * (len1 - len2)
        print("lenth",list2)

    # Add corresponding elements from left to right
    result = [x + y for x, y in zip(list1, list2)]

    return result

# Example lists
list1 = [2, 4, 7, 0, 5, 8]
list2 = [3, 3, -1, 7]

# Print the original lists
print("Original lists:")
print(list1)
print(list2)

# Add the two lists from left
result1 = add_lists_from_left(list1, list2)

# Print the result
print("\nAdd said two lists from left:")
print(result1)

# Another example
list3 = [1, 2, 3, 4, 5, 6]
list4 = [2, 4, -3]

# Print the original lists
print("\nOriginal lists:")
print(list3)
print(list4)

# Add the two lists from left
result2 = add_lists_from_left(list3, list4)

# Print the result
print("\nAdd said two lists from left:")
print(result2)

def two_list(list1,list2):
  len1=len(list1)
  len2=len(list2)
  if len1<len2:
    list1+=[0]*(len1-len2)
  elif len2<len1:
    list2+=[0]*(len1-len2)
    new_list=[ x+y for x,y in zip(list1,list2)]
  return new_list
list1 = [2, 4, 7, 0, 5, 8]
list2 = [3, 3, -1, 7]

print(two_list(list1,list2))

# Another example
list3 = [1, 2, 3, 4, 5, 6]
list4 = [2, 4, -3]

# Print the original lists
print("\nOriginal lists:")
print(list3)
print(list4)
print(two_list(list3,list4))

"""156. Write a Python program to add two given lists of different lengths, starting on the right.
Original lists:
[2, 4, 7, 0, 5, 8]

[3, 3, -1, 7]

Add said two lists from left:

[2, 4, 10, 3, 4, 15]

Original lists:
[1, 2, 3, 4, 5, 6]

[2, 4, -3]
Add said two lists from left:

[1, 2, 3, 6, 9, 3]
"""

def right_side(list1,list2):
  len1=list[::-1]

from itertools import zip_longest

def add_lists_from_right(list1, list2):
    # Reverse both lists
    reversed_list1 = list1[::-1]
    reversed_list2 = list2[::-1]

    # Use zip_longest to pad the shorter list with zeros
    result = [x + y for x, y in zip_longest(reversed_list1, reversed_list2, fillvalue=0)][::-1]

    return result

list1= [2, 4, 7, 0, 5, 8]
list2=[3, 3, -1, 7]
print(add_lists_from_right(list1,list2))

def add_lists_from_right(list1, list2):
  #because from the right side comparsion came from the right hand side
    # Reverse both lists and pad the shorter list with zeros
    reversed_list1 = list1[::-1]
    reversed_list2 = list2[::-1]

    # Determine the lengths of the reversed lists
    len1, len2 = len(reversed_list1), len(reversed_list2)

    # Pad the shorter list with zeros on the left to match the length of the longer list
    if len1 < len2:
        reversed_list1 += [0] * (len2 - len1)
    elif len2 < len1:
        reversed_list2 += [0] * (len1 - len2)

    # Add corresponding elements from right to left
    result = [x + y for x, y in zip(reversed_list1, reversed_list2)][::-1]

    return result
list1= [2, 4, 7, 0, 5, 8]
list2=[3, 3, -1, 7]
print(add_lists_from_right(list1,list2))

"""7. Write a Python program to interleave lists of varying lengths.
Original lists:
[2, 4, 7, 0, 5, 8]

[2, 5, 8]


[0, 1]

[3, 3, -1, 7]
Interleave said lists of different lengths:
[2, 2, 0, 3, 4, 5, 1, 3, 7, 8, -1, 0, 7, 5, 8]
"""

def interleave_lists(*lists):
    max_length = max(len(lst) for lst in lists)
    result = []

    for i in range(max_length):
      for lst in lists:
        if i < len(lst):
          result.append(lst[i])

    return result

# Example lists
list1 = [2, 4, 7, 0, 5, 8]
list2 = [2, 5, 8]
list3 = [0, 1]
list4 = [3, 3, -1, 7]

# Print the original lists
print("Original lists:")
print(list1)
print(list2)
print(list3)
print(list4)

# Interleave the lists of varying lengths
result = interleave_lists(list1, list2, list3, list4)

# Print the result
print("\nInterleave said lists of different lengths:")
print(result)

def different(*list):
  #numbers=[element for sublist in zip_longest(*list,fillvalue=None)  for element in sublist if element not in None]



  number=[element for sublist in zip_longest(*list, fillvalue=None) for element in sublist if element is not None]
  return number


# Example lists



# Example lists
list1 = [2, 4, 7, 0, 5, 8]
list2 = [2, 5, 8]
list3 = [0, 1]
list4 = [3, 3, -1, 7]

# Print the original lists
print("Original lists:")
print(list1)
print(list2)
print(list3)
print(list4)

# Interleave the lists of varying lengths
result = different(list1, list2, list3, list4)

# Print the result
print("\nInterleave said lists of different lengths:")
print(result)

from itertools import zip_longest
def test(*args):
  from itertools import zip_longest
  return [el for t in zip_longest(*args,fillvalue=None) for el in t if el is not None]
list1 = [2, 4, 7, 0, 5, 8]
list2 = [2, 5, 8]
list3 = [0, 1]
list4 = [3, 3, -1, 7]

# Print the original lists
print("Original lists:")
print(list1)
print(list2)
print(list3)
print(list4)
print(test(list1,list2,list3,list4))

from ast import If
def new_list(list1,list2,list3,list4):
  l5=[]
  l1=len(list1)
  l2=len(list2)
  l3=len(list3)
  l4=len(list4)

  for x in range(max(l1,l2,l3,l4)):

    if x<l1:
      l5.append(list1[x])

    if x<l2:
      l5.append(list2[x])
    if x<l3:
      l5.append(list3[x])
    if x<l4:
      l5.append(list4[x])
  return l5
list1 = [2, 4, 7, 0, 5, 8]
list2 = [2, 5, 8]
list3 = [0, 1]
list4 = [3, 3, -1, 7]
print(new_list(list1,list2,list3,list4))

"""158. Write a Python program to find the maximum and minimum values in a given list of tuples.

Original list with tuples:

[('V', 60), ('VI', 70), ('VII', 75), ('VIII', 72), ('IX', 78), ('X', 70)]

v,v1----0 index
60,70,76....1 index
Maximum and minimum values of the said list of tuples:
(78, 60)
"""

number=[('V', 60), ('VI', 70), ('VII', 75), ('VIII', 72), ('IX', 78), ('X', 70)]
maximum_value=max(i[1] for i in number)
minimum_value=min(i[1] for i in number)
print((maximum_value,minimum_value))

def max_min_list_tuples(class_students):
  return_max = max(class_students,key=lambda x:x[1])[1]
  return_min = min(class_students,key=lambda x:x[1])[1]
  return return_max, return_min

class_students = [('V', 60), ('VI', 70), ('VII', 75), ('VIII', 72), ('IX', 78), ('X', 70)]
print("Original list with tuples:")
print(class_students)
print("\nMaximum and minimum values of the said list of tuples:")
print(max_min_list_tuples(class_students))

"""Add a value(7), 5 times, to a list:
['7', '7', '7', '7', '7']

Add 5, 6 times, to a list:
[1, 2, 3, 4, 5, 5, 5, 5, 5, 5]


Add a list, 4 times, to a list of lists:
[[1, 2, 5], [1, 2, 5], [1, 2, 5], [1, 2, 5]]


Add a list, 4 times, to a list of lists:

[[5, 6, 7], [1, 2, 5], [1, 2, 5], [1, 2, 5], [1, 2, 5]]
"""

a=['7']*5
print(a)
b=[1,2,3,4,5]
b.extend([5 for i in range(5)])
print(b)
one=[1,2,5]
two=[[1,2,5]]*4
print(two)
three=[[5,6,7]]
four=three+two
print(four)

"""160. Write a Python program to remove the first specified number of elements from a given list satisfying a condition.
Remove the first 4 number of even numbers from the following list:
[3,10,4,7,5,7,8,3,3,4,5,9,3,4,9,8,5]

Output:
[3, 7, 5, 7, 3, 3, 5, 9, 3, 4, 9, 8, 5]

Original list:

[3, 10, 4, 7, 5, 7, 8, 3, 3, 4, 5, 9, 3, 4, 9, 8, 5]

Remove first 4 even numbers from the said list:
[3, 7, 5, 7, 3, 3, 5, 9, 3, 4, 9, 8, 5]
"""

a = [3,10,4,7,5,7,8,3,3,4,5,9,3,4,9,8,5]
print(len(a))
cs=[]
ds=[]
for x in a:
  if x%2==0 and len(cs)<4:
    cs.append(x)
  else:
    ds.append(x)

print(ds)

a = [3,10,4,7,5,7,8,3,3,4,5,9,3,4,9,8,5]
[a.remove(x) for x in a if x%2==0 and len(a)>13]
print(a)

a= [3,10,4,7,5,7,8,3,3,4,5,9,3,4,9,8,5]
# remove first 4 even numbers
[a.remove(i) for i in a if i%2 == 0 and len(a) > 13 ] # 13 because len(a)-4
print(a)

"""['s', 'd', 'f', 's', 'd', 'f', 's', 'f', 'k', 'o', 'p', 'i', 'w', 'e', 'k', 'c']
Last occurrence of f in the said list:

7
Last occurrence of c in the said list:

15
Last occurrence of k in the said list:

14
Last occurrence of w in the said list:

12
"""

def last_occurrence(l1, ch):
  idx = 0
  for i,x in enumerate(l1):
    if (x == ch):
      idx = i
  return idx

chars = ['s','d','f','s','d','f','s','f','k','o','p','i','w','e','k','c']
print("Original list:")
print(chars)
ch = 'f'
print("Last occurrence of",ch,"in the said list:")
print(last_occurrence(chars, ch))
ch = 'c'
print("Last occurrence of",ch,"in the said list:")
print(last_occurrence(chars, ch))
ch = 'k'
print("Last occurrence of",ch,"in the said list:")
print(last_occurrence(chars, ch))
ch = 'w'
print("Last occurrence of",ch,"in the said list:")
print(last_occurrence(chars, ch))

def last_occurence(l,ch):
  return"".join(l).rindex(ch)
print('Original list:')
l=['s', 'd', 'f', 's', 'd', 'f', 's', 'f', 'k', 'o', 'p', 'i', 'w', 'e', 'k', 'c']
print(l)
ch='f'
print(f"Last occurrence of {ch} in the said list:")
print(last_occurence(l,ch))
ch='c'
print(f"Last occurrence of {ch} in the said list:")
print(last_occurence(l,ch))
ch='k'
print(f"Last occurrence of {ch} in the said list:")
print(last_occurence(l,ch))
ch='w'
print(f"Last occurrence of {ch} in the said list:")
print(last_occurence(l,ch))

"""163. Write a Python program to get the index of the first element that is greater than a specified element.
Original list:
[12, 45, 23, 67, 78, 90, 100, 76, 38, 62, 73, 29, 83]

Index of the first element which is greater than 73 in the said list:

4
Index of the first element which is greater than 21 in the said list:

1
Index of the first element which is greater than 80 in the said list:

5
Index of the first element which is greater than 55 in the said list:

3
"""

def last_occurence(list,n):
  for i,value in enumerate(list):
    if value>n:
      return i
list=[12, 45, 23, 67, 78, 90, 100, 76, 38, 62, 73, 29, 83]
n=75
print(f"Index of the first element which is greater than {n} in the said list")
print(last_occurence(list,n))

# Online Python compiler (interpreter) to run Python online.
# Write Python 3 code in this online editor and run it.
print("Hello world")
def last_occurence(list,n):
  for i,value in enumerate(list):
    if value>n:
      return i
list=[12, 45, 23, 67, 78, 90, 100, 76, 38, 62, 73, 29, 83]
n=75
print(f"Index of the first element which is greater than {n} in the said list")
print(last_occurence(list,n))
n=21
print(f"Index of the first element which is greater than {n} in the said list")
print(last_occurence(list,n))
n=80
print(f"Index of the first element which is greater than {n} in the said list")
print(last_occurence(list,n))
n=55
print(f"Index of the first element which is greater than {n} in the said list")
print(last_occurence(list,n))

"""'''164. Write a Python program to get items from a given list with specific conditions.

Original list:

[12, 45, 23, 67, 78, 90, 45, 32, 100, 76, 38, 62, 73, 29, 83]

Number of Items of the said list which are even and greater than 45'''

"""

new_list=[12, 45, 23, 67, 78, 90, 45, 32, 100, 76, 38, 62, 73, 29, 83]
count=0
for x in new_list:
    if x%2==0 and x>45:
        count+=1
print("cout of the even number is",count)

"""'''165. Write a Python program to split a given list into specified-sized chunks.
Original list:
[12, 45, 23, 67, 78, 90, 45, 32, 100, 76, 38, 62, 73, 29, 83]

Split the said list into equal size 3

[[12, 45, 23], [67, 78, 90], [45, 32, 100], [76, 38, 62], [73, 29, 83]]

Split the said list into equal size 4

[[12, 45, 23, 67], [78, 90, 45, 32], [100, 76, 38, 62], [73, 29, 83]]
Split the said list into equal size 5


[[12, 45, 23, 67, 78], [90, 45, 32, 100, 76], [38, 62, 73, 29, 83]]''
"""

def equal_number(number,n):
    new_number=[]
    for x in range(0,len(number),n):
        new_number.append(number[x:x+n])
    return new_number
number=[12, 45, 23, 67, 78, 90, 45, 32, 100, 76, 38, 62, 73, 29, 83]
n=3
print(f"Split the said list into equal size {n}")
print(equal_number(number, n))
n=4
print(f"Split the said list into equal size {n}")
print(equal_number(number, n))
n=5
print(f"Split the said list into equal size {n}")
print(equal_number(number, n))

"""'''166. Write a Python program to remove the None value from a given list.
Original list:

[12, 0, None, 23, None, -55, 234, 89, None, 0, 6, -12]

Remove None value from the said list:
[12, 0, 23, -55, 234, 89, 0, 6, -12]'''
"""

def type_number(list2):
    new_line=[x for x in list2 if x!=None]
    return new_line

list2=[12, 0, None, 23, None, -55, 234, 89, None, 0, 6, -12]
print("Orginal list")
print(type_number(list2))

new_line1=[12, 0, None, 23, None, -55, 234, 89, None, 0, 6, -12]
new_value=[]
for x in new_line1:
    if isinstance(x,int):
        new_value.append(x)
print(new_value)

"""'''167. Write a Python program to convert a given list of strings into a list of lists.
Original list of strings:

['Red', 'Maroon', 'Yellow', 'Olive']

Convert the said list of strings into list of lists:

[['R', 'e', 'd'], ['M', 'a', 'r', 'o', 'o', 'n'], ['Y', 'e', 'l', 'l', 'o', 'w'], ['O', 'l', 'i', 'v', 'e']]'''
"""

new_set=['Red', 'Maroon', 'Yellow', 'Olive']
new_life=[[word for word in x] for x in new_set]
print(new_life)

"""168. Write a Python program to display vertically each element of a given list, list of lists.
Original list:
['a', 'b', 'c', 'd', 'e', 'f']
Display each element vertically of the said list:

a

b

c
d

e
f

Original list:
[[1, 2, 5], [4, 5, 8], [7, 3, 6]]

Display each element vertically of the said list of lists:

1 4 7
2 5 3
5 8 6
"""

new_list=['a', 'b', 'c', 'd', 'e', 'f']
for x in new_list:
  print(x)
new_ones=[[1, 2, 5], [4, 5, 8], [7, 3, 6]]
for x,y,z in zip(*new_ones):
  print(x,y,z)

"""169. Write a Python program to convert a given list of strings and characters to a single list of characters.
Original list:
['red', 'white', 'a', 'b', 'black', 'f']

Convert the said list of strings and characters to a single list of characters:
['r', 'e', 'd', 'w', 'h', 'i', 't', 'e', 'a', 'b', 'b', 'l', 'a', 'c', 'k', 'f']

Click me to see the sample solution

"""

new_list=['red', 'white', 'a', 'b', 'black', 'f']
new_one=[ y for x in new_list for y in x ]
print(new_one)

"""Write a Python program to insert an element in a given list after every nth position.

170. Write a Python program to insert an element in a given list after every nth position.
Original list:
[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
Insert a in the said list after 2 nd element:
[1, 2, 'a', 3, 4, 'a', 5, 6, 'a', 7, 8, 'a', 9, 0]
Insert b in the said list after 4 th element:
[1, 2, 3, 4, 'b', 5, 6, 7, 8, 'b', 9, 0]
"""

def element_insert_position(number,replace_value,position):
  new_number=[]
  for x in range(0,len(number),n):
    new_number.extend(number[x:x+n])
  return new_number
number=[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
replace_value='a'
n=2
print(element_insert_position(number,replace_value,n))

def insert_after_nth_position(lst, element, n):

    # Iterate over the list in reverse to avoid index shifting
    for i in range(len(lst) - 1, 0, -1):
        # Check if the current index is a multiple of n
        if i % n == 0:
            # Insert the element after the current position
            lst.insert(i, element)
            print(lst)

    return lst

# Original list
original_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
element='a'
n=2
# Insert 'a' after every 2nd element
result_a = insert_after_nth_position(original_list.copy(),element,n)
print("\nInsert 'b' in the said list after every 4th element:")
print(result_a)
element='b'
n=4
result_b = insert_after_nth_position(original_list.copy(),element,n)
print(result_b)
print(len(original_list))

def insert_after_nth_position(lst, element, n):
    # Iterate over the list in reverse to avoid index shifting
    for i in range(len(lst) - 1, 0, -1):
        # Check if the current index is a multiple of n
        if i % n == 0:
            # Insert the element after the current position
            lst.insert(i, element)

    return lst

# Original list
original_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]

# Insert 'a' after every 2nd element
result_a = insert_after_nth_position(original_list.copy(), 'a', 2)
print("Insert 'a' in the said list after every 2nd element:")
print(result_a)

# Insert 'b' after every 4th element
result_b = insert_after_nth_position(original_list.copy(), 'b', 4)
print("\nInsert 'b' in the said list after every 4th element:")
print(result_b)
print(len(original_list))

"""171. Write a Python program to concatenate element-wise three given lists.
Original lists:
['0', '1', '2', '3', '4']

['red', 'green', 'black', 'blue', 'white']

['100', '200', '300', '400', '500']

Concatenate element-wise three said lists:
['0red100', '1green200', '2black300', '3blue400', '4white500']
"""

list1=['0', '1', '2', '3', '4']
list2=['red', 'green', 'black', 'blue', 'white']
list3=['100', '200', '300', '400', '500']
new_one=[x+y+z for x,y,z in zip(list1,list2,list3)]
print(f"Concatenate element-wise three said lists:{new_one}")

"""172. Write a Python program to remove the last N number of elements from a given list.
Original lists:
[2, 3, 9, 8, 2, 0, 39, 84, 2, 2, 34, 2, 34, 5, 3, 5]

Remove the last 3 elements from the said list:
[2, 3, 9, 8, 2, 0, 39, 84, 2, 2, 34, 2, 34]

Remove the last 5 elements from the said list:

[2, 3, 9, 8, 2, 0, 39, 84, 2, 2, 34]
Remove the last 1 element from the said list:

[2, 3, 9, 8, 2, 0, 39, 84, 2, 2, 34, 2, 34, 5, 3]
"""

def remove_elements(number,n):
  new_line=number[:len(number)-n]
  return new_line

number=[2, 3, 9, 8, 2, 0, 39, 84, 2, 2, 34, 2, 34, 5, 3, 5]
n=3
print(number)
s=remove_elements(number,n)

print(f"Remove the last {n} elements from the said list:{s}")
n=5
p=remove_elements(number,n)
print(f"Remove the last {n} elements from the said list:{p}")
n=1
l=remove_elements(number,n)
print(f"Remove the last {n} elements from the said list:{l}")

"""Write a Python program to merge some list items in a given list using the index valu


Original lists:
['a', 'b', 'c', 'd', 'e', 'f', 'g']


Merge items from 2 to 4 in the said List:

['a', 'b', 'cd', 'e', 'f', 'g']

Merge items from 3 to 7 in the said List:

['a', 'b', 'c', 'defg']
"""

def merge_list(number,merge,merge1):

  number[merge:merge1]=[''.join(number[merge:merge1])]
  return number
number=['a', 'b', 'c', 'd', 'e', 'f', 'g']
merge=2
merge1=4
print(merge_list(number,merge,merge1))
merge=3
merge1=7
print(merge_list(number,merge,merge1))

def merge_list(number,merge,merge1):

  number[merge:merge1]=[''.join(number[merge:merge1])]
  return number
number=['a', 'b', 'c', 'd', 'e', 'f', 'g']
merge=3
merge1=7
print(merge_list(number,merge,merge1))

"""174. Write a Python program to add a number to each element in a given list of numbers.
Original lists:
[3, 8, 9, 4, 5, 0, 5, 0, 3]

Add 3 to each element in the said list:

[6, 11, 12, 7, 8, 3, 8, 3, 6]
Original lists:

[3.2, 8, 9.9, 4.2, 5, 0.1, 5, 3.11, 0]

Add 0.51 to each element in the said list:

[3.71, 8.51, 10.41, 4.71, 5.51, 0.61, 5.51, 3.62, 0.51]
"""

def add_values(number,new_values):
  expression=[x+new_values for x in number]
  return expression
list1=[3, 8, 9, 4, 5, 0, 5, 0, 3]
list2=3
strong=add_values(list1,list2)
print(f"Add {list2} to each element in the said list:{strong}")
list1=[3.2, 8, 9.9, 4.2, 5, 0.1, 5, 3.11, 0]
list2=0.51
tough=add_values(list1,list2)
print(f"Add {list2} to each element in the said list:{tough}")

"""175. Write a Python program to find the minimum and maximum value for each tuple position in a given list of tuples.
Original list:
[(2, 3), (2, 4), (0, 6), (7, 1)]

Maximum value for each tuple position in the said list of tuples:

[7, 6]
Minimum value for each tuple position in the said list of tuples:
[0, 1]

"""

values=[(2, 3), (2, 4), (0, 6), (7, 1)]
max_value=max([x[0] for x in values])
min_value=max([x[1] for x in values])
max_value1=max([x[0] for x in values])
min_value1=min([x[1] for x in values])
print("Maximum value for each tuple position in the said list of tuples")
print("\n",[max_value1,min_value1])

print("Minimum value for each tuple position in the said list of tuples",[max_value1,min_value1])

"""176. Write a Python program to create a new list by dividing two given lists of numbers.

nums1 = [7, 2, 3, 4, 9, 2, 3]
nums2 = [9, 8, 2, 3, 3, 1, 2]
"""

def create_new_list(nums1,nums2):
  new_ones=[x/y for x,y in zip(nums1,nums2)]
  return new_ones
nums1 = [7, 2, 3, 4, 9, 2, 3]
nums2 = [9, 8, 2, 3, 3, 1, 2]
print(create_new_list(nums1,nums2))

"""177. Write a Python program to find common elements in a given list of lists.
Original list:
[[7, 2, 3, 4, 7], [9, 2, 3, 2, 5], [8, 2, 3, 4, 4]]

Common elements of the said list of lists:
[2, 3]

Original list:
[['a', 'b', 'c'], ['b', 'c', 'd'], ['c', 'd', 'e']]

Common elements of the said list of lists:
['c']

"""

a=[[7, 2, 3, 4, 7], [9, 2, 3, 2, 5], [8, 2, 3, 4, 4]]
new_element=[i for i in a[0] if i in a[1] and  i in a[2]]
print(new_element)

new_ls=[['a', 'b', 'c'], ['b', 'c', 'd'], ['c', 'd', 'e']]
new_element=[i for i in new_ls[0] if i in new_ls[1] and i in new_ls[2]]
print(new_element)

# Define a function called 'inset_element_list' that inserts an element 'x' into a list 'lst' after every 'n' elements.
def inset_element_list(lst, x, n):
    # Initialize a variable 'i' with the value of 'n'.
    i = n
    # Use a 'while' loop to iterate through the list 'lst'.
    while i < len(lst):
        # Insert the element 'x' at index 'i' in the list.
        lst.insert(i, x)
        # Increment 'i' by 'n+1' to skip 'n' elements and insert 'x' again after 'n' elements.
        i += n + 1
    # Return the modified list 'lst'.
    return lst

# Create a list of integers 'nums'.
nums = [1, 3, 5, 7, 9, 11, 0, 2, 4, 6, 8, 10, 8, 9, 0, 4, 3, 0]

# Print a message indicating the original list of integers.
print("Original list:")
print(nums)

# Define the element 'x' and the interval 'n' for inserting into the list.
x = 20
n = 4

# Print a message indicating the element to be inserted and the interval.
print("\nInsert", x, "in the said list after every", n, "th element:")

# Call the 'inset_element_list' function to insert 'x' into the list 'nums' after every 'n' elements and print the result.
print(inset_element_list(nums, x, n))

# Create a list of characters 'chars'.
chars = ['s', 'd', 'f', 'j', 's', 'a', 'j', 'd', 'f', 'd']

# Print a message indicating the original list of characters.
print("\nOriginal list:")
print(chars)

# Define the element 'x' and the interval 'n' for inserting into the list.
x = 'Z'
n = 3

# Print a message indicating the element to be inserted and the interval.
print("\nInsert", x, "in said list after every", n, "th element:")

# Call the 'inset_element_list' function to insert 'x' into the list 'chars' after every 'n' elements and print the result.
print(inset_element_list(chars, x, n))